// Auto-generated by Stone, do not modify.
/**
 * An Error object returned from a route.
 * @typedef {Object} Error
 * @property {string} error_summary - Text summary of the error.
 * @property {T} error - The error object.
 * @property {UserMessage} user_message - User-friendly error message.
 * @template T
 */

/**
 * User-friendly error message.
 * @typedef {Object} UserMessage
 * @property {string} text - The message.
 * @property {string} locale
 */

 /**
  * @typedef {string} Timestamp
  */

/**
 * Result returned by methods that may either launch an asynchronous job or
 * complete synchronously. Upon synchronous completion of the job, no additional
 * information is returned.
 * @typedef {Object} AsyncLaunchEmptyResult
 * @property {string} [async_job_id] - Available if .tag is async_job_id. This
 * response indicates that the processing is asynchronous. The string is an id
 * that can be used to obtain the status of the asynchronous job.
 * @property {('async_job_id'|'complete')} .tag - Tag identifying the union variant.
 */

/**
 * Result returned by methods that launch an asynchronous job. A method who may
 * either launch an asynchronous job, or complete the request synchronously, can
 * use this union by extending it, and adding a 'complete' field with the type
 * of the synchronous response. See LaunchEmptyResult for an example.
 * @typedef {Object} AsyncLaunchResultBase
 * @property {string} [async_job_id] - Available if .tag is async_job_id. This
 * response indicates that the processing is asynchronous. The string is an id
 * that can be used to obtain the status of the asynchronous job.
 * @property {'async_job_id'} .tag - Tag identifying the union variant.
 */

/**
 * Arguments for methods that poll the status of an asynchronous job.
 * @typedef {Object} AsyncPollArg
 * @property {string} async_job_id - Id of the asynchronous job. This is the
 * value of a response returned from the method that launched the job.
 */

/**
 * Result returned by methods that poll for the status of an asynchronous job.
 * Upon completion of the job, no additional information is returned.
 * @typedef {Object} AsyncPollEmptyResult
 * @property {('in_progress'|'complete')} .tag - Tag identifying the union variant.
 */

/**
 * Error returned by methods for polling the status of asynchronous job.
 * @typedef {Object} AsyncPollError
 * @property {('invalid_async_job_id'|'internal_error'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * Result returned by methods that poll for the status of an asynchronous job.
 * Unions that extend this union should add a 'complete' field with a type of
 * the information returned upon job completion. See PollEmptyResult for an
 * example.
 * @typedef {Object} AsyncPollResultBase
 * @property {'in_progress'} .tag - Tag identifying the union variant.
 */

/**
 * Error occurred because the account doesn't have permission to access the
 * resource.
 * @typedef {Object} AuthAccessError
 * @property {AuthInvalidAccountTypeError} [invalid_account_type] - Available if
 * .tag is invalid_account_type. Current account type cannot access the
 * resource.
 * @property {AuthPaperAccessError} [paper_access_denied] - Available if .tag is
 * paper_access_denied. Current account cannot access Paper.
 * @property {('invalid_account_type'|'paper_access_denied'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * Errors occurred during authentication.
 * @typedef {Object} AuthAuthError
 * @property {('invalid_access_token'|'invalid_select_user'|'invalid_select_admin'|'user_suspended'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} AuthInvalidAccountTypeError
 * @property {('endpoint'|'feature'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} AuthPaperAccessError
 * @property {('paper_disabled'|'not_paper_user'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * Error occurred because the app is being rate limited.
 * @typedef {Object} AuthRateLimitError
 * @property {AuthRateLimitReason} reason - The reason why the app is being rate
 * limited.
 * @property {number} retry_after - The number of seconds that the app should
 * wait before making another request.
 */

/**
 * @typedef {Object} AuthRateLimitReason
 * @property {('too_many_requests'|'too_many_write_operations'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} AuthTokenFromOAuth1Arg
 * @property {string} oauth1_token - The supplied OAuth 1.0 access token.
 * @property {string} oauth1_token_secret - The token secret associated with the
 * supplied access token.
 */

/**
 * @typedef {Object} AuthTokenFromOAuth1Error
 * @property {('invalid_oauth1_token_info'|'app_id_mismatch'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} AuthTokenFromOAuth1Result
 * @property {string} oauth2_token - The OAuth 2.0 token generated from the
 * supplied OAuth 1.0 token.
 */

/**
 * @typedef {Object} FilesAddPropertiesError
 * @property {string} [template_not_found] - Available if .tag is
 * template_not_found. Property template does not exist for given identifier.
 * @property {FilesLookupError} [path] - Available if .tag is path.
 * @property {('template_not_found'|'restricted_content'|'other'|'path'|'property_field_too_large'|'does_not_fit_template'|'property_group_already_exists')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} FilesAlphaGetMetadataArg
 * @property {string} path - The path of a file or folder on Dropbox.
 * @property {boolean} include_media_info - If true, FileMetadata.media_info is
 * set for photo and video.
 * @property {boolean} include_deleted - If true, DeletedMetadata will be
 * returned for deleted file or folder, otherwise LookupError.not_found will be
 * returned.
 * @property {boolean} include_has_explicit_shared_members - If true, the
 * results will include a flag for each file indicating whether or not  that
 * file has any explicit members.
 * @property {Array.<Object>} [include_property_templates] - If set to a valid
 * list of template IDs, FileMetadata.property_groups is set for files with
 * custom properties.
 */

/**
 * @typedef {Object} FilesAlphaGetMetadataError
 * @property {FilesLookupError} [path] - Available if .tag is path.
 * @property {FilesLookUpPropertiesError} [properties_error] - Available if .tag
 * is properties_error.
 * @property {('path'|'properties_error')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} FilesCommitInfo
 * @property {Object} contents - The file contents to be uploaded.
 * @property {string} path - Path in the user's Dropbox to save the file.
 * @property {FilesWriteMode} mode - Selects what to do if the file already
 * exists.
 * @property {boolean} autorename - If there's a conflict, as determined by
 * mode, have the Dropbox server try to autorename the file to avoid conflict.
 * @property {Timestamp} [client_modified] - The value to store as the
 * client_modified timestamp. Dropbox automatically records the time at which
 * the file was written to the Dropbox servers. It can also record an additional
 * timestamp, provided by Dropbox desktop clients, mobile clients, and API apps
 * of when the file was actually created or modified.
 * @property {boolean} mute - Normally, users are made aware of any file
 * modifications in their Dropbox account via notifications in the client
 * software. If true, this tells the clients that this modification shouldn't
 * result in a user notification.
 */

/**
 * @typedef {Object} FilesCommitInfoWithProperties
 * @property {Object} contents - The file contents to be uploaded.
 * @property {string} path - Path in the user's Dropbox to save the file.
 * @property {FilesWriteMode} mode - Selects what to do if the file already
 * exists.
 * @property {boolean} autorename - If there's a conflict, as determined by
 * mode, have the Dropbox server try to autorename the file to avoid conflict.
 * @property {Timestamp} [client_modified] - The value to store as the
 * client_modified timestamp. Dropbox automatically records the time at which
 * the file was written to the Dropbox servers. It can also record an additional
 * timestamp, provided by Dropbox desktop clients, mobile clients, and API apps
 * of when the file was actually created or modified.
 * @property {boolean} mute - Normally, users are made aware of any file
 * modifications in their Dropbox account via notifications in the client
 * software. If true, this tells the clients that this modification shouldn't
 * result in a user notification.
 * @property {Array.<PropertiesPropertyGroup>} [property_groups] - List of
 * custom properties to add to file.
 */

/**
 * @typedef {Object} FilesCreateFolderArg
 * @property {string} path - Path in the user's Dropbox to create.
 * @property {boolean} autorename - If there's a conflict, have the Dropbox
 * server try to autorename the folder to avoid the conflict.
 */

/**
 * @typedef {Object} FilesCreateFolderError
 * @property {FilesWriteError} [path] - Available if .tag is path.
 * @property {'path'} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} FilesDeleteArg
 * @property {string} path - Path in the user's Dropbox to delete.
 */

/**
 * @typedef {Object} FilesDeleteBatchArg
 * @property {Array.<FilesDeleteArg>} entries
 */

/**
 * @typedef {Object} FilesDeleteBatchError
 * @property {('too_many_write_operations'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} FilesDeleteBatchJobStatus
 * @property {FilesDeleteBatchResult} [complete] - Available if .tag is
 * complete. The batch delete has finished.
 * @property {FilesDeleteBatchError} [failed] - Available if .tag is failed. The
 * batch delete has failed.
 * @property {('in_progress'|'complete'|'failed'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * Result returned by delete_batch that may either launch an asynchronous job or
 * complete synchronously.
 * @typedef {Object} FilesDeleteBatchLaunch
 * @property {string} [async_job_id] - Available if .tag is async_job_id. This
 * response indicates that the processing is asynchronous. The string is an id
 * that can be used to obtain the status of the asynchronous job.
 * @property {FilesDeleteBatchResult} [complete] - Available if .tag is
 * complete.
 * @property {('async_job_id'|'complete'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} FilesDeleteBatchResult
 * @property {Array.<FilesDeleteBatchResultEntry>} entries
 */

/**
 * @typedef {Object} FilesDeleteBatchResultEntry
 * @property {FilesDeleteResult} [success] - Available if .tag is success.
 * @property {FilesDeleteError} [failure] - Available if .tag is failure.
 * @property {('success'|'failure')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} FilesDeleteError
 * @property {FilesLookupError} [path_lookup] - Available if .tag is
 * path_lookup.
 * @property {FilesWriteError} [path_write] - Available if .tag is path_write.
 * @property {('path_lookup'|'path_write'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} FilesDeleteResult
 * @property {(FilesFileMetadata|FilesFolderMetadata|FilesDeletedMetadata)}
 * metadata
 */

/**
 * Indicates that there used to be a file or folder at this path, but it no
 * longer exists.
 * @typedef {Object} FilesDeletedMetadata
@property {'deleted'} [.tag] - Tag identifying this subtype variant. This field
is only present when needed to discriminate between multiple possible subtypes.
 * @property {string} name - The last component of the path (including
 * extension). This never contains a slash.
 * @property {string} [path_lower] - The lowercased full path in the user's
 * Dropbox. This always starts with a slash. This field will be null if the file
 * or folder is not mounted.
 * @property {string} [path_display] - The cased path to be used for display
 * purposes only. In rare instances the casing will not correctly match the
 * user's filesystem, but this behavior will match the path provided in the Core
 * API v1, and at least the last path component will have the correct casing.
 * Changes to only the casing of paths won't be returned by
 * list_folder/continue. This field will be null if the file or folder is not
 * mounted.
 * @property {string} [parent_shared_folder_id] - Deprecated. Please use
 * FileSharingInfo.parent_shared_folder_id or
 * FolderSharingInfo.parent_shared_folder_id instead.
 */

/**
 * Dimensions for a photo or video.
 * @typedef {Object} FilesDimensions
 * @property {number} height - Height of the photo/video.
 * @property {number} width - Width of the photo/video.
 */

/**
 * @typedef {Object} FilesDownloadArg
 * @property {string} path - The path of the file to download.
 * @property {string} [rev] - Deprecated. Please specify revision in path
 * instead.
 */

/**
 * @typedef {Object} FilesDownloadError
 * @property {FilesLookupError} [path] - Available if .tag is path.
 * @property {('path'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} FilesFileMetadata
@property {'file'} [.tag] - Tag identifying this subtype variant. This field is
only present when needed to discriminate between multiple possible subtypes.
 * @property {string} name - The last component of the path (including
 * extension). This never contains a slash.
 * @property {string} id - A unique identifier for the file.
 * @property {Timestamp} client_modified - For files, this is the modification
 * time set by the desktop client when the file was added to Dropbox. Since this
 * time is not verified (the Dropbox server stores whatever the desktop client
 * sends up), this should only be used for display purposes (such as sorting)
 * and not, for example, to determine if a file has changed or not.
 * @property {Timestamp} server_modified - The last time the file was modified
 * on Dropbox.
 * @property {string} rev - A unique identifier for the current revision of a
 * file. This field is the same rev as elsewhere in the API and can be used to
 * detect changes and avoid conflicts.
 * @property {number} size - The file size in bytes.
 * @property {string} [path_lower] - The lowercased full path in the user's
 * Dropbox. This always starts with a slash. This field will be null if the file
 * or folder is not mounted.
 * @property {string} [path_display] - The cased path to be used for display
 * purposes only. In rare instances the casing will not correctly match the
 * user's filesystem, but this behavior will match the path provided in the Core
 * API v1, and at least the last path component will have the correct casing.
 * Changes to only the casing of paths won't be returned by
 * list_folder/continue. This field will be null if the file or folder is not
 * mounted.
 * @property {string} [parent_shared_folder_id] - Deprecated. Please use
 * FileSharingInfo.parent_shared_folder_id or
 * FolderSharingInfo.parent_shared_folder_id instead.
 * @property {FilesMediaInfo} [media_info] - Additional information if the file
 * is a photo or video.
 * @property {FilesFileSharingInfo} [sharing_info] - Set if this file is
 * contained in a shared folder.
 * @property {Array.<PropertiesPropertyGroup>} [property_groups] - Additional
 * information if the file has custom properties with the property template
 * specified.
 * @property {boolean} [has_explicit_shared_members] - This flag will only be
 * present if include_has_explicit_shared_members  is true in list_folder or
 * get_metadata. If this  flag is present, it will be true if this file has any
 * explicit shared  members. This is different from sharing_info in that this
 * could be true  in the case where a file has explicit members but is not
 * contained within  a shared folder.
 */

/**
 * Sharing info for a file which is contained by a shared folder.
 * @typedef {Object} FilesFileSharingInfo
 * @property {boolean} read_only - True if the file or folder is inside a
 * read-only shared folder.
 * @property {string} parent_shared_folder_id - ID of shared folder that holds
 * this file.
 * @property {string} [modified_by] - The last user who modified the file. This
 * field will be null if the user's account has been deleted.
 */

/**
 * @typedef {Object} FilesFolderMetadata
@property {'folder'} [.tag] - Tag identifying this subtype variant. This field
is only present when needed to discriminate between multiple possible subtypes.
 * @property {string} name - The last component of the path (including
 * extension). This never contains a slash.
 * @property {string} id - A unique identifier for the folder.
 * @property {string} [path_lower] - The lowercased full path in the user's
 * Dropbox. This always starts with a slash. This field will be null if the file
 * or folder is not mounted.
 * @property {string} [path_display] - The cased path to be used for display
 * purposes only. In rare instances the casing will not correctly match the
 * user's filesystem, but this behavior will match the path provided in the Core
 * API v1, and at least the last path component will have the correct casing.
 * Changes to only the casing of paths won't be returned by
 * list_folder/continue. This field will be null if the file or folder is not
 * mounted.
 * @property {string} [parent_shared_folder_id] - Deprecated. Please use
 * FileSharingInfo.parent_shared_folder_id or
 * FolderSharingInfo.parent_shared_folder_id instead.
 * @property {string} [shared_folder_id] - Deprecated. Please use sharing_info
 * instead.
 * @property {FilesFolderSharingInfo} [sharing_info] - Set if the folder is
 * contained in a shared folder or is a shared folder mount point.
 * @property {Array.<PropertiesPropertyGroup>} [property_groups] - Additional
 * information if the file has custom properties with the property template
 * specified.
 */

/**
 * Sharing info for a folder which is contained in a shared folder or is a
 * shared folder mount point.
 * @typedef {Object} FilesFolderSharingInfo
 * @property {boolean} read_only - True if the file or folder is inside a
 * read-only shared folder.
 * @property {string} [parent_shared_folder_id] - Set if the folder is contained
 * by a shared folder.
 * @property {string} [shared_folder_id] - If this folder is a shared folder
 * mount point, the ID of the shared folder mounted at this location.
 * @property {boolean} traverse_only - Specifies that the folder can only be
 * traversed and the user can only see a limited subset of the contents of this
 * folder because they don't have read access to this folder. They do, however,
 * have access to some sub folder.
 * @property {boolean} no_access - Specifies that the folder cannot be accessed
 * by the user.
 */

/**
 * @typedef {Object} FilesGetCopyReferenceArg
 * @property {string} path - The path to the file or folder you want to get a
 * copy reference to.
 */

/**
 * @typedef {Object} FilesGetCopyReferenceError
 * @property {FilesLookupError} [path] - Available if .tag is path.
 * @property {('path'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} FilesGetCopyReferenceResult
 * @property {(FilesFileMetadata|FilesFolderMetadata|FilesDeletedMetadata)}
 * metadata - Metadata of the file or folder.
 * @property {string} copy_reference - A copy reference to the file or folder.
 * @property {Timestamp} expires - The expiration date of the copy reference.
 * This value is currently set to be far enough in the future so that expiration
 * is effectively not an issue.
 */

/**
 * @typedef {Object} FilesGetMetadataArg
 * @property {string} path - The path of a file or folder on Dropbox.
 * @property {boolean} include_media_info - If true, FileMetadata.media_info is
 * set for photo and video.
 * @property {boolean} include_deleted - If true, DeletedMetadata will be
 * returned for deleted file or folder, otherwise LookupError.not_found will be
 * returned.
 * @property {boolean} include_has_explicit_shared_members - If true, the
 * results will include a flag for each file indicating whether or not  that
 * file has any explicit members.
 */

/**
 * @typedef {Object} FilesGetMetadataError
 * @property {FilesLookupError} [path] - Available if .tag is path.
 * @property {'path'} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} FilesGetTemporaryLinkArg
 * @property {string} path - The path to the file you want a temporary link to.
 */

/**
 * @typedef {Object} FilesGetTemporaryLinkError
 * @property {FilesLookupError} [path] - Available if .tag is path.
 * @property {('path'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} FilesGetTemporaryLinkResult
 * @property {FilesFileMetadata} metadata - Metadata of the file.
 * @property {string} link - The temporary link which can be used to stream
 * content the file.
 */

/**
 * GPS coordinates for a photo or video.
 * @typedef {Object} FilesGpsCoordinates
 * @property {number} latitude - Latitude of the GPS coordinates.
 * @property {number} longitude - Longitude of the GPS coordinates.
 */

/**
 * @typedef {Object} FilesInvalidPropertyGroupError
 * @property {string} [template_not_found] - Available if .tag is
 * template_not_found. Property template does not exist for given identifier.
 * @property {FilesLookupError} [path] - Available if .tag is path.
 * @property {('template_not_found'|'restricted_content'|'other'|'path'|'property_field_too_large'|'does_not_fit_template')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} FilesListFolderArg
 * @property {string} path - The path to the folder you want to see the contents
 * of.
 * @property {boolean} recursive - If true, the list folder operation will be
 * applied recursively to all subfolders and the response will contain contents
 * of all subfolders.
 * @property {boolean} include_media_info - If true, FileMetadata.media_info is
 * set for photo and video.
 * @property {boolean} include_deleted - If true, the results will include
 * entries for files and folders that used to exist but were deleted.
 * @property {boolean} include_has_explicit_shared_members - If true, the
 * results will include a flag for each file indicating whether or not  that
 * file has any explicit members.
 */

/**
 * @typedef {Object} FilesListFolderContinueArg
 * @property {string} cursor - The cursor returned by your last call to
 * list_folder or list_folder/continue.
 */

/**
 * @typedef {Object} FilesListFolderContinueError
 * @property {FilesLookupError} [path] - Available if .tag is path.
 * @property {('path'|'reset'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} FilesListFolderError
 * @property {FilesLookupError} [path] - Available if .tag is path.
 * @property {('path'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} FilesListFolderGetLatestCursorResult
 * @property {string} cursor - Pass the cursor into list_folder/continue to see
 * what's changed in the folder since your previous query.
 */

/**
 * @typedef {Object} FilesListFolderLongpollArg
 * @property {string} cursor - A cursor as returned by list_folder or
 * list_folder/continue. Cursors retrieved by setting
 * ListFolderArg.include_media_info to true are not supported.
 * @property {number} timeout - A timeout in seconds. The request will block for
 * at most this length of time, plus up to 90 seconds of random jitter added to
 * avoid the thundering herd problem. Care should be taken when using this
 * parameter, as some network infrastructure does not support long timeouts.
 */

/**
 * @typedef {Object} FilesListFolderLongpollError
 * @property {('reset'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} FilesListFolderLongpollResult
 * @property {boolean} changes - Indicates whether new changes are available. If
 * true, call list_folder/continue to retrieve the changes.
 * @property {number} [backoff] - If present, backoff for at least this many
 * seconds before calling list_folder/longpoll again.
 */

/**
 * @typedef {Object} FilesListFolderResult
 * @property
 * {Array.<(FilesFileMetadata|FilesFolderMetadata|FilesDeletedMetadata)>}
 * entries - The files and (direct) subfolders in the folder.
 * @property {string} cursor - Pass the cursor into list_folder/continue to see
 * what's changed in the folder since your previous query.
 * @property {boolean} has_more - If true, then there are more entries
 * available. Pass the cursor to list_folder/continue to retrieve the rest.
 */

/**
 * @typedef {Object} FilesListRevisionsArg
 * @property {string} path - The path to the file you want to see the revisions
 * of.
 * @property {number} limit - The maximum number of revision entries returned.
 */

/**
 * @typedef {Object} FilesListRevisionsError
 * @property {FilesLookupError} [path] - Available if .tag is path.
 * @property {('path'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} FilesListRevisionsResult
 * @property {boolean} is_deleted - If the file is deleted.
 * @property {Array.<FilesFileMetadata>} entries - The revisions for the file.
 * Only non-delete revisions will show up here.
 */

/**
 * @typedef {Object} FilesLookUpPropertiesError
 * @property {'property_group_not_found'} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} FilesLookupError
 * @property {string} [malformed_path] - Available if .tag is malformed_path.
 * @property {FilesPathRootError} [invalid_path_root] - Available if .tag is
 * invalid_path_root. The path root parameter provided is invalid.
 * @property {('malformed_path'|'not_found'|'not_file'|'not_folder'|'restricted_content'|'invalid_path_root'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} FilesMediaInfo
 * @property {(FilesPhotoMetadata|FilesVideoMetadata)} [metadata] - Available if
 * .tag is metadata. The metadata for the photo/video.
 * @property {('pending'|'metadata')} .tag - Tag identifying the union variant.
 */

/**
 * Metadata for a photo or video.
 * @typedef {Object} FilesMediaMetadata
@property {("photo"|"video")} .tag - Tag identifying the subtype variant.
 * @property {FilesDimensions} [dimensions] - Dimension of the photo/video.
 * @property {FilesGpsCoordinates} [location] - The GPS coordinate of the
 * photo/video.
 * @property {Timestamp} [time_taken] - The timestamp when the photo/video is
 * taken.
 */

/**
 * Metadata for a file or folder.
 * @typedef {Object} FilesMetadata
@property {("file"|"folder"|"deleted")} .tag - Tag identifying the subtype
variant.
 * @property {string} name - The last component of the path (including
 * extension). This never contains a slash.
 * @property {string} [path_lower] - The lowercased full path in the user's
 * Dropbox. This always starts with a slash. This field will be null if the file
 * or folder is not mounted.
 * @property {string} [path_display] - The cased path to be used for display
 * purposes only. In rare instances the casing will not correctly match the
 * user's filesystem, but this behavior will match the path provided in the Core
 * API v1, and at least the last path component will have the correct casing.
 * Changes to only the casing of paths won't be returned by
 * list_folder/continue. This field will be null if the file or folder is not
 * mounted.
 * @property {string} [parent_shared_folder_id] - Deprecated. Please use
 * FileSharingInfo.parent_shared_folder_id or
 * FolderSharingInfo.parent_shared_folder_id instead.
 */

/**
 * @typedef {Object} FilesPathRootError
 * @property {string} [path_root] - The user's latest path root value. None if
 * the user no longer has a path root.
 */

/**
 * Metadata for a photo.
 * @typedef {Object} FilesPhotoMetadata
@property {'photo'} [.tag] - Tag identifying this subtype variant. This field is
only present when needed to discriminate between multiple possible subtypes.
 * @property {FilesDimensions} [dimensions] - Dimension of the photo/video.
 * @property {FilesGpsCoordinates} [location] - The GPS coordinate of the
 * photo/video.
 * @property {Timestamp} [time_taken] - The timestamp when the photo/video is
 * taken.
 */

/**
 * @typedef {Object} FilesPreviewArg
 * @property {string} path - The path of the file to preview.
 * @property {string} [rev] - Deprecated. Please specify revision in path
 * instead.
 */

/**
 * @typedef {Object} FilesPreviewError
 * @property {FilesLookupError} [path] - Available if .tag is path. An error
 * occurs when downloading metadata for the file.
 * @property {('path'|'in_progress'|'unsupported_extension'|'unsupported_content')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} FilesPropertiesError
 * @property {string} [template_not_found] - Available if .tag is
 * template_not_found. Property template does not exist for given identifier.
 * @property {FilesLookupError} [path] - Available if .tag is path.
 * @property {('template_not_found'|'restricted_content'|'other'|'path')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} FilesPropertyGroupUpdate
 * @property {string} template_id - A unique identifier for a property template.
 * @property {Array.<PropertiesPropertyField>} [add_or_update_fields] - List of
 * property fields to update if the field already exists. If the field doesn't
 * exist, add the field to the property group.
 * @property {Array.<string>} [remove_fields] - List of property field names to
 * remove from property group if the field exists.
 */

/**
 * @typedef {Object} FilesPropertyGroupWithPath
 * @property {string} path - A unique identifier for the file.
 * @property {Array.<PropertiesPropertyGroup>} property_groups - Filled custom
 * property templates associated with a file.
 */

/**
 * @typedef {Object} FilesRelocationArg
 * @property {string} from_path - Path in the user's Dropbox to be copied or
 * moved.
 * @property {string} to_path - Path in the user's Dropbox that is the
 * destination.
 * @property {boolean} allow_shared_folder - If true, copy will copy contents in
 * shared folder, otherwise RelocationError.cant_copy_shared_folder will be
 * returned if from_path contains shared folder. This field is always true for
 * move.
 * @property {boolean} autorename - If there's a conflict, have the Dropbox
 * server try to autorename the file to avoid the conflict.
 */

/**
 * @typedef {Object} FilesRelocationBatchArg
 * @property {Array.<FilesRelocationPath>} entries - List of entries to be moved
 * or copied. Each entry is RelocationPath.
 * @property {boolean} allow_shared_folder - If true, copy_batch will copy
 * contents in shared folder, otherwise RelocationError.cant_copy_shared_folder
 * will be returned if RelocationPath.from_path contains shared folder.  This
 * field is always true for move_batch.
 * @property {boolean} autorename - If there's a conflict with any file, have
 * the Dropbox server try to autorename that file to avoid the conflict.
 */

/**
 * @typedef {Object} FilesRelocationBatchError
 * @property {FilesLookupError} [from_lookup] - Available if .tag is
 * from_lookup.
 * @property {FilesWriteError} [from_write] - Available if .tag is from_write.
 * @property {FilesWriteError} [to] - Available if .tag is to.
 * @property {('from_lookup'|'from_write'|'to'|'cant_copy_shared_folder'|'cant_nest_shared_folder'|'cant_move_folder_into_itself'|'too_many_files'|'other'|'duplicated_or_nested_paths'|'too_many_write_operations')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} FilesRelocationBatchJobStatus
 * @property {FilesRelocationBatchResult} [complete] - Available if .tag is
 * complete. The copy or move batch job has finished.
 * @property {FilesRelocationBatchError} [failed] - Available if .tag is failed.
 * The copy or move batch job has failed with exception.
 * @property {('in_progress'|'complete'|'failed')} .tag - Tag identifying the union variant.
 */

/**
 * Result returned by copy_batch or move_batch that may either launch an
 * asynchronous job or complete synchronously.
 * @typedef {Object} FilesRelocationBatchLaunch
 * @property {string} [async_job_id] - Available if .tag is async_job_id. This
 * response indicates that the processing is asynchronous. The string is an id
 * that can be used to obtain the status of the asynchronous job.
 * @property {FilesRelocationBatchResult} [complete] - Available if .tag is
 * complete.
 * @property {('async_job_id'|'complete'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} FilesRelocationBatchResult
 * @property {Array.<FilesRelocationResult>} entries
 */

/**
 * @typedef {Object} FilesRelocationError
 * @property {FilesLookupError} [from_lookup] - Available if .tag is
 * from_lookup.
 * @property {FilesWriteError} [from_write] - Available if .tag is from_write.
 * @property {FilesWriteError} [to] - Available if .tag is to.
 * @property {('from_lookup'|'from_write'|'to'|'cant_copy_shared_folder'|'cant_nest_shared_folder'|'cant_move_folder_into_itself'|'too_many_files'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} FilesRelocationPath
 * @property {string} from_path - Path in the user's Dropbox to be copied or
 * moved.
 * @property {string} to_path - Path in the user's Dropbox that is the
 * destination.
 */

/**
 * @typedef {Object} FilesRelocationResult
 * @property {(FilesFileMetadata|FilesFolderMetadata|FilesDeletedMetadata)}
 * metadata
 */

/**
 * @typedef {Object} FilesRemovePropertiesArg
 * @property {string} path - A unique identifier for the file.
 * @property {Array.<Object>} property_template_ids - A list of identifiers for
 * a property template created by route properties/template/add.
 */

/**
 * @typedef {Object} FilesRemovePropertiesError
 * @property {string} [template_not_found] - Available if .tag is
 * template_not_found. Property template does not exist for given identifier.
 * @property {FilesLookupError} [path] - Available if .tag is path.
 * @property {FilesLookUpPropertiesError} [property_group_lookup] - Available if
 * .tag is property_group_lookup.
 * @property {('template_not_found'|'restricted_content'|'other'|'path'|'property_group_lookup')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} FilesRestoreArg
 * @property {string} path - The path to the file you want to restore.
 * @property {string} rev - The revision to restore for the file.
 */

/**
 * @typedef {Object} FilesRestoreError
 * @property {FilesLookupError} [path_lookup] - Available if .tag is
 * path_lookup. An error occurs when downloading metadata for the file.
 * @property {FilesWriteError} [path_write] - Available if .tag is path_write.
 * An error occurs when trying to restore the file to that path.
 * @property {('path_lookup'|'path_write'|'invalid_revision'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} FilesSaveCopyReferenceArg
 * @property {string} copy_reference - A copy reference returned by
 * copy_reference/get.
 * @property {string} path - Path in the user's Dropbox that is the destination.
 */

/**
 * @typedef {Object} FilesSaveCopyReferenceError
 * @property {FilesWriteError} [path] - Available if .tag is path.
 * @property {('path'|'invalid_copy_reference'|'no_permission'|'not_found'|'too_many_files'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} FilesSaveCopyReferenceResult
 * @property {(FilesFileMetadata|FilesFolderMetadata|FilesDeletedMetadata)}
 * metadata - The metadata of the saved file or folder in the user's Dropbox.
 */

/**
 * @typedef {Object} FilesSaveUrlArg
 * @property {string} path - The path in Dropbox where the URL will be saved to.
 * @property {string} url - The URL to be saved.
 */

/**
 * @typedef {Object} FilesSaveUrlError
 * @property {FilesWriteError} [path] - Available if .tag is path.
 * @property {('path'|'download_failed'|'invalid_url'|'not_found'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} FilesSaveUrlJobStatus
 * @property {FilesFileMetadata} [complete] - Available if .tag is complete.
 * Metadata of the file where the URL is saved to.
 * @property {FilesSaveUrlError} [failed] - Available if .tag is failed.
 * @property {('in_progress'|'complete'|'failed')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} FilesSaveUrlResult
 * @property {string} [async_job_id] - Available if .tag is async_job_id. This
 * response indicates that the processing is asynchronous. The string is an id
 * that can be used to obtain the status of the asynchronous job.
 * @property {FilesFileMetadata} [complete] - Available if .tag is complete.
 * Metadata of the file where the URL is saved to.
 * @property {('async_job_id'|'complete')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} FilesSearchArg
 * @property {string} path - The path in the user's Dropbox to search. Should
 * probably be a folder.
 * @property {string} query - The string to search for. The search string is
 * split on spaces into multiple tokens. For file name searching, the last token
 * is used for prefix matching (i.e. "bat c" matches "bat cave" but not "batman
 * car").
 * @property {number} start - The starting index within the search results (used
 * for paging).
 * @property {number} max_results - The maximum number of search results to
 * return.
 * @property {FilesSearchMode} mode - The search mode (filename,
 * filename_and_content, or deleted_filename). Note that searching file content
 * is only available for Dropbox Business accounts.
 */

/**
 * @typedef {Object} FilesSearchError
 * @property {FilesLookupError} [path] - Available if .tag is path.
 * @property {('path'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} FilesSearchMatch
 * @property {FilesSearchMatchType} match_type - The type of the match.
 * @property {(FilesFileMetadata|FilesFolderMetadata|FilesDeletedMetadata)}
 * metadata - The metadata for the matched file or folder.
 */

/**
 * Indicates what type of match was found for a given item.
 * @typedef {Object} FilesSearchMatchType
 * @property {('filename'|'content'|'both')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} FilesSearchMode
 * @property {('filename'|'filename_and_content'|'deleted_filename')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} FilesSearchResult
 * @property {Array.<FilesSearchMatch>} matches - A list (possibly empty) of
 * matches for the query.
 * @property {boolean} more - Used for paging. If true, indicates there is
 * another page of results available that can be fetched by calling search
 * again.
 * @property {number} start - Used for paging. Value to set the start argument
 * to when calling search to fetch the next page of results.
 */

/**
 * Sharing info for a file or folder.
 * @typedef {Object} FilesSharingInfo
 * @property {boolean} read_only - True if the file or folder is inside a
 * read-only shared folder.
 */

/**
 * @typedef {Object} FilesThumbnailArg
 * @property {string} path - The path to the image file you want to thumbnail.
 * @property {FilesThumbnailFormat} format - The format for the thumbnail image,
 * jpeg (default) or png. For  images that are photos, jpeg should be preferred,
 * while png is  better for screenshots and digital arts.
 * @property {FilesThumbnailSize} size - The size for the thumbnail image.
 */

/**
 * @typedef {Object} FilesThumbnailError
 * @property {FilesLookupError} [path] - Available if .tag is path. An error
 * occurs when downloading metadata for the image.
 * @property {('path'|'unsupported_extension'|'unsupported_image'|'conversion_error')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} FilesThumbnailFormat
 * @property {('jpeg'|'png')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} FilesThumbnailSize
 * @property {('w32h32'|'w64h64'|'w128h128'|'w640h480'|'w1024h768')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} FilesUpdatePropertiesError
 * @property {string} [template_not_found] - Available if .tag is
 * template_not_found. Property template does not exist for given identifier.
 * @property {FilesLookupError} [path] - Available if .tag is path.
 * @property {FilesLookUpPropertiesError} [property_group_lookup] - Available if
 * .tag is property_group_lookup.
 * @property {('template_not_found'|'restricted_content'|'other'|'path'|'property_field_too_large'|'does_not_fit_template'|'property_group_lookup')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} FilesUpdatePropertyGroupArg
 * @property {string} path - A unique identifier for the file.
 * @property {Array.<FilesPropertyGroupUpdate>} update_property_groups - Filled
 * custom property templates associated with a file.
 */

/**
 * @typedef {Object} FilesUploadError
 * @property {FilesUploadWriteFailed} [path] - Available if .tag is path. Unable
 * to save the uploaded contents to a file.
 * @property {('path'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} FilesUploadErrorWithProperties
 * @property {FilesUploadWriteFailed} [path] - Available if .tag is path. Unable
 * to save the uploaded contents to a file.
 * @property {FilesInvalidPropertyGroupError} [properties_error] - Available if
 * .tag is properties_error.
 * @property {('path'|'other'|'properties_error')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} FilesUploadSessionAppendArg
 * @property {Object} contents - The file contents to be uploaded.
 * @property {FilesUploadSessionCursor} cursor - Contains the upload session ID
 * and the offset.
 * @property {boolean} close - If true, the current session will be closed, at
 * which point you won't be able to call upload_session/append_v2 anymore with
 * the current session.
 */

/**
 * @typedef {Object} FilesUploadSessionCursor
 * @property {Object} contents - The file contents to be uploaded.
 * @property {string} session_id - The upload session ID (returned by
 * upload_session/start).
 * @property {number} offset - The amount of data that has been uploaded so far.
 * We use this to make sure upload data isn't lost or duplicated in the event of
 * a network error.
 */

/**
 * @typedef {Object} FilesUploadSessionFinishArg
 * @property {Object} contents - The file contents to be uploaded.
 * @property {FilesUploadSessionCursor} cursor - Contains the upload session ID
 * and the offset.
 * @property {FilesCommitInfo} commit - Contains the path and other optional
 * modifiers for the commit.
 */

/**
 * @typedef {Object} FilesUploadSessionFinishBatchArg
 * @property {Array.<FilesUploadSessionFinishArg>} entries - Commit information
 * for each file in the batch.
 */

/**
 * @typedef {Object} FilesUploadSessionFinishBatchJobStatus
 * @property {FilesUploadSessionFinishBatchResult} [complete] - Available if
 * .tag is complete. The :route:`upload_session/finish_batch` has finished.
 * @property {('in_progress'|'complete')} .tag - Tag identifying the union variant.
 */

/**
 * Result returned by upload_session/finish_batch that may either launch an
 * asynchronous job or complete synchronously.
 * @typedef {Object} FilesUploadSessionFinishBatchLaunch
 * @property {string} [async_job_id] - Available if .tag is async_job_id. This
 * response indicates that the processing is asynchronous. The string is an id
 * that can be used to obtain the status of the asynchronous job.
 * @property {FilesUploadSessionFinishBatchResult} [complete] - Available if
 * .tag is complete.
 * @property {('async_job_id'|'complete'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} FilesUploadSessionFinishBatchResult
 * @property {Array.<FilesUploadSessionFinishBatchResultEntry>} entries - Commit
 * result for each file in the batch.
 */

/**
 * @typedef {Object} FilesUploadSessionFinishBatchResultEntry
 * @property {FilesFileMetadata} [success] - Available if .tag is success.
 * @property {FilesUploadSessionFinishError} [failure] - Available if .tag is
 * failure.
 * @property {('success'|'failure')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} FilesUploadSessionFinishError
 * @property {FilesUploadSessionLookupError} [lookup_failed] - Available if .tag
 * is lookup_failed. The session arguments are incorrect; the value explains the
 * reason.
 * @property {FilesWriteError} [path] - Available if .tag is path. Unable to
 * save the uploaded contents to a file.
 * @property {('lookup_failed'|'path'|'too_many_shared_folder_targets'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} FilesUploadSessionLookupError
 * @property {FilesUploadSessionOffsetError} [incorrect_offset] - Available if
 * .tag is incorrect_offset. The specified offset was incorrect. See the value
 * for the correct offset. This error may occur when a previous request was
 * received and processed successfully but the client did not receive the
 * response, e.g. due to a network error.
 * @property {('not_found'|'incorrect_offset'|'closed'|'not_closed'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} FilesUploadSessionOffsetError
 * @property {number} correct_offset - The offset up to which data has been
 * collected.
 */

/**
 * @typedef {Object} FilesUploadSessionStartArg
 * @property {Object} contents - The file contents to be uploaded.
 * @property {boolean} close - If true, the current session will be closed, at
 * which point you won't be able to call upload_session/append_v2 anymore with
 * the current session.
 */

/**
 * @typedef {Object} FilesUploadSessionStartResult
 * @property {string} session_id - A unique identifier for the upload session.
 * Pass this to upload_session/append_v2 and upload_session/finish.
 */

/**
 * @typedef {Object} FilesUploadWriteFailed
 * @property {FilesWriteError} reason - The reason why the file couldn't be
 * saved.
 * @property {string} upload_session_id - The upload session ID; this may be
 * used to retry the commit.
 */

/**
 * Metadata for a video.
 * @typedef {Object} FilesVideoMetadata
@property {'video'} [.tag] - Tag identifying this subtype variant. This field is
only present when needed to discriminate between multiple possible subtypes.
 * @property {FilesDimensions} [dimensions] - Dimension of the photo/video.
 * @property {FilesGpsCoordinates} [location] - The GPS coordinate of the
 * photo/video.
 * @property {Timestamp} [time_taken] - The timestamp when the photo/video is
 * taken.
 * @property {number} [duration] - The duration of the video in milliseconds.
 */

/**
 * @typedef {Object} FilesWriteConflictError
 * @property {('file'|'folder'|'file_ancestor'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} FilesWriteError
 * @property {string} [malformed_path] - Available if .tag is malformed_path.
 * @property {FilesWriteConflictError} [conflict] - Available if .tag is
 * conflict. Couldn't write to the target path because there was something in
 * the way.
 * @property {('malformed_path'|'conflict'|'no_write_permission'|'insufficient_space'|'disallowed_name'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * Your intent when writing a file to some path. This is used to determine what
 * constitutes a conflict and what the autorename strategy is. In some
 * situations, the conflict behavior is identical: (a) If the target path
 * doesn't contain anything, the file is always written; no conflict. (b) If the
 * target path contains a folder, it's always a conflict. (c) If the target path
 * contains a file with identical contents, nothing gets written; no conflict.
 * The conflict checking differs in the case where there's a file at the target
 * path with contents different from the contents you're trying to write.
 * @typedef {Object} FilesWriteMode
 * @property {string} [update] - Available if .tag is update. Overwrite if the
 * given "rev" matches the existing file's "rev". The autorename strategy is to
 * append the string "conflicted copy" to the file name. For example,
 * "document.txt" might become "document (conflicted copy).txt" or "document
 * (Panda's conflicted copy).txt".
 * @property {('add'|'overwrite'|'update')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} PropertiesGetPropertyTemplateArg
 * @property {string} template_id - An identifier for property template added by
 * route properties/template/add.
 */

/**
 * The Property template for the specified template.
 * @typedef {Object} PropertiesGetPropertyTemplateResult
 * @property {string} name - A display name for the property template. Property
 * template names can be up to 256 bytes.
 * @property {string} description - Description for new property template.
 * Property template descriptions can be up to 1024 bytes.
 * @property {Array.<PropertiesPropertyFieldTemplate>} fields - This is a list
 * of custom properties associated with a property template. There can be up to
 * 64 properties in a single property template.
 */

/**
 * @typedef {Object} PropertiesListPropertyTemplateIds
 * @property {Array.<Object>} template_ids - List of identifiers for templates
 * added by route properties/template/add.
 */

/**
 * @typedef {Object} PropertiesModifyPropertyTemplateError
 * @property {string} [template_not_found] - Available if .tag is
 * template_not_found. Property template does not exist for given identifier.
 * @property {('template_not_found'|'restricted_content'|'other'|'conflicting_property_names'|'too_many_properties'|'too_many_templates'|'template_attribute_too_large')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} PropertiesPropertyField
 * @property {string} name - This is the name or key of a custom property in a
 * property template. File property names can be up to 256 bytes.
 * @property {string} value - Value of a custom property attached to a file.
 * Values can be up to 1024 bytes.
 */

/**
 * Describe a single property field type which that can be part of a property
 * template.
 * @typedef {Object} PropertiesPropertyFieldTemplate
 * @property {string} name - This is the name or key of a custom property in a
 * property template. File property names can be up to 256 bytes.
 * @property {string} description - This is the description for a custom
 * property in a property template. File property description can be up to 1024
 * bytes.
 * @property {PropertiesPropertyType} type - This is the data type of the value
 * of this property. This type will be enforced upon property creation and
 * modifications.
 */

/**
 * Collection of custom properties in filled property templates.
 * @typedef {Object} PropertiesPropertyGroup
 * @property {string} template_id - A unique identifier for a property template
 * type.
 * @property {Array.<PropertiesPropertyField>} fields - This is a list of custom
 * properties associated with a file. There can be up to 32 properties for a
 * template.
 */

/**
 * Describes property templates that can be filled and associated with a file.
 * @typedef {Object} PropertiesPropertyGroupTemplate
 * @property {string} name - A display name for the property template. Property
 * template names can be up to 256 bytes.
 * @property {string} description - Description for new property template.
 * Property template descriptions can be up to 1024 bytes.
 * @property {Array.<PropertiesPropertyFieldTemplate>} fields - This is a list
 * of custom properties associated with a property template. There can be up to
 * 64 properties in a single property template.
 */

/**
 * @typedef {Object} PropertiesPropertyTemplateError
 * @property {string} [template_not_found] - Available if .tag is
 * template_not_found. Property template does not exist for given identifier.
 * @property {('template_not_found'|'restricted_content'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * Data type of the given property added. This endpoint is in beta and  only
 * properties of type strings is supported.
 * @typedef {Object} PropertiesPropertyType
 * @property {('string'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * Defines the access levels for collaborators.
 * @typedef {Object} SharingAccessLevel
 * @property {('owner'|'editor'|'viewer'|'viewer_no_comment'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * Policy governing who can change a shared folder's access control list (ACL).
 * In other words, who can add, remove, or change the privileges of members.
 * @typedef {Object} SharingAclUpdatePolicy
 * @property {('owner'|'editors'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * Arguments for add_file_member.
 * @typedef {Object} SharingAddFileMemberArgs
 * @property {string} file - File to which to add members.
 * @property {Array.<SharingMemberSelector>} members - Members to add. Note that
 * even an email address is given, this may result in a user being directy added
 * to the membership if that email is the user's main account email.
 * @property {string} [custom_message] - Message to send to added members in
 * their invitation.
 * @property {boolean} quiet - Whether added members should be notified via
 * device notifications of their invitation.
 * @property {SharingAccessLevel} access_level - AccessLevel union object,
 * describing what access level we want to give new members.
 * @property {boolean} add_message_as_comment - If the custom message should be
 * added as a comment on the file.
 */

/**
 * Errors for add_file_member.
 * @typedef {Object} SharingAddFileMemberError
 * @property {SharingSharingUserError} [user_error] - Available if .tag is
 * user_error.
 * @property {SharingSharingFileAccessError} [access_error] - Available if .tag
 * is access_error.
 * @property {('user_error'|'access_error'|'rate_limit'|'invalid_comment'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} SharingAddFolderMemberArg
 * @property {string} shared_folder_id - The ID for the shared folder.
 * @property {Array.<SharingAddMember>} members - The intended list of members
 * to add.  Added members will receive invites to join the shared folder.
 * @property {boolean} quiet - Whether added members should be notified via
 * email and device notifications of their invite.
 * @property {string} [custom_message] - Optional message to display to added
 * members in their invitation.
 */

/**
 * @typedef {Object} SharingAddFolderMemberError
 * @property {SharingSharedFolderAccessError} [access_error] - Available if .tag
 * is access_error. Unable to access shared folder.
 * @property {SharingAddMemberSelectorError} [bad_member] - Available if .tag is
 * bad_member. :field:`AddFolderMemberArg.members` contains a bad invitation
 * recipient.
 * @property {number} [too_many_members] - Available if .tag is
 * too_many_members. The value is the member limit that was reached.
 * @property {number} [too_many_pending_invites] - Available if .tag is
 * too_many_pending_invites. The value is the pending invite limit that was
 * reached.
 * @property {('access_error'|'email_unverified'|'bad_member'|'cant_share_outside_team'|'too_many_members'|'too_many_pending_invites'|'rate_limit'|'too_many_invitees'|'insufficient_plan'|'team_folder'|'no_permission'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * The member and type of access the member should have when added to a shared
 * folder.
 * @typedef {Object} SharingAddMember
 * @property {SharingMemberSelector} member - The member to add to the shared
 * folder.
 * @property {SharingAccessLevel} access_level - The access level to grant
 * member to the shared folder.  AccessLevel.owner is disallowed.
 */

/**
 * @typedef {Object} SharingAddMemberSelectorError
 * @property {string} [invalid_dropbox_id] - Available if .tag is
 * invalid_dropbox_id. The value is the ID that could not be identified.
 * @property {string} [invalid_email] - Available if .tag is invalid_email. The
 * value is the e-email address that is malformed.
 * @property {string} [unverified_dropbox_id] - Available if .tag is
 * unverified_dropbox_id. The value is the ID of the Dropbox user with an
 * unverified e-mail address.  Invite unverified users by e-mail address instead
 * of by their Dropbox ID.
 * @property {('automatic_group'|'invalid_dropbox_id'|'invalid_email'|'unverified_dropbox_id'|'group_deleted'|'group_not_on_team'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * Arguments for change_file_member_access.
 * @typedef {Object} SharingChangeFileMemberAccessArgs
 * @property {string} file - File for which we are changing a member's access.
 * @property {SharingMemberSelector} member - The member whose access we are
 * changing.
 * @property {SharingAccessLevel} access_level - The new access level for the
 * member.
 */

/**
 * Metadata for a collection-based shared link.
 * @typedef {Object} SharingCollectionLinkMetadata
@property {'collection'} [.tag] - Tag identifying this subtype variant. This
field is only present when needed to discriminate between multiple possible
subtypes.
 * @property {string} url - URL of the shared link.
 * @property {SharingVisibility} visibility - Who can access the link.
 * @property {Timestamp} [expires] - Expiration time, if set. By default the
 * link won't expire.
 */

/**
 * @typedef {Object} SharingCreateSharedLinkArg
 * @property {string} path - The path to share.
 * @property {boolean} short_url - Whether to return a shortened URL.
 * @property {SharingPendingUploadMode} [pending_upload] - If it's okay to share
 * a path that does not yet exist, set this to either PendingUploadMode.file or
 * PendingUploadMode.folder to indicate whether to assume it's a file or folder.
 */

/**
 * @typedef {Object} SharingCreateSharedLinkError
 * @property {FilesLookupError} [path] - Available if .tag is path.
 * @property {('path'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} SharingCreateSharedLinkWithSettingsArg
 * @property {string} path - The path to be shared by the shared link
 * @property {SharingSharedLinkSettings} [settings] - The requested settings for
 * the newly created shared link
 */

/**
 * @typedef {Object} SharingCreateSharedLinkWithSettingsError
 * @property {FilesLookupError} [path] - Available if .tag is path.
 * @property {SharingSharedLinkSettingsError} [settings_error] - Available if
 * .tag is settings_error. There is an error with the given settings
 * @property {('path'|'email_not_verified'|'shared_link_already_exists'|'settings_error'|'access_denied')} .tag - Tag identifying the union variant.
 */

/**
 * Sharing actions that may be taken on files.
 * @typedef {Object} SharingFileAction
 * @property {('edit_contents'|'invite_viewer'|'invite_viewer_no_comment'|'unshare'|'relinquish_membership'|'share_link'|'create_link'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} SharingFileErrorResult
 * @property {string} [file_not_found_error] - Available if .tag is
 * file_not_found_error. File specified by id was not found.
 * @property {string} [invalid_file_action_error] - Available if .tag is
 * invalid_file_action_error. User does not have permission to take the
 * specified action on the file.
 * @property {string} [permission_denied_error] - Available if .tag is
 * permission_denied_error. User does not have permission to access file
 * specified by file.Id.
 * @property {('file_not_found_error'|'invalid_file_action_error'|'permission_denied_error'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * The metadata of a file shared link
 * @typedef {Object} SharingFileLinkMetadata
@property {'file'} [.tag] - Tag identifying this subtype variant. This field is
only present when needed to discriminate between multiple possible subtypes.
 * @property {string} url - URL of the shared link.
 * @property {string} name - The linked file name (including extension). This
 * never contains a slash.
 * @property {SharingLinkPermissions} link_permissions - The link's access
 * permissions.
 * @property {Timestamp} client_modified - The modification time set by the
 * desktop client when the file was added to Dropbox. Since this time is not
 * verified (the Dropbox server stores whatever the desktop client sends up),
 * this should only be used for display purposes (such as sorting) and not, for
 * example, to determine if a file has changed or not.
 * @property {Timestamp} server_modified - The last time the file was modified
 * on Dropbox.
 * @property {string} rev - A unique identifier for the current revision of a
 * file. This field is the same rev as elsewhere in the API and can be used to
 * detect changes and avoid conflicts.
 * @property {number} size - The file size in bytes.
 * @property {string} [id] - A unique identifier for the linked file.
 * @property {Timestamp} [expires] - Expiration time, if set. By default the
 * link won't expire.
 * @property {string} [path_lower] - The lowercased full path in the user's
 * Dropbox. This always starts with a slash. This field will only be present
 * only if the linked file is in the authenticated user's  dropbox.
 * @property {SharingTeamMemberInfo} [team_member_info] - The team membership
 * information of the link's owner.  This field will only be present  if the
 * link's owner is a team member.
 * @property {UsersTeam} [content_owner_team_info] - The team information of the
 * content's owner. This field will only be present if the content's owner is a
 * team member and the content's owner team is different from the link's owner
 * team.
 */

/**
 * @typedef {Object} SharingFileMemberActionError
 * @property {SharingSharingFileAccessError} [access_error] - Available if .tag
 * is access_error. Specified file was invalid or user does not have access.
 * @property {('invalid_member'|'no_permission'|'access_error'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} SharingFileMemberActionIndividualResult
 * @property {SharingAccessLevel} [success] - Available if .tag is success.
 * Member was successfully removed from this file. If AccessLevel is given, the
 * member still has access via a parent shared folder.
 * @property {SharingFileMemberActionError} [member_error] - Available if .tag
 * is member_error. User was not able to perform this action.
 * @property {('success'|'member_error')} .tag - Tag identifying the union variant.
 */

/**
 * Per-member result for remove_file_member_2 or add_file_member or
 * change_file_member_access.
 * @typedef {Object} SharingFileMemberActionResult
 * @property {SharingMemberSelector} member - One of specified input members.
 * @property {SharingFileMemberActionIndividualResult} result - The outcome of
 * the action on this member.
 */

/**
 * @typedef {Object} SharingFileMemberRemoveActionResult
 * @property {SharingMemberAccessLevelResult} [success] - Available if .tag is
 * success. Member was successfully removed from this file.
 * @property {SharingFileMemberActionError} [member_error] - Available if .tag
 * is member_error. User was not able to remove this member.
 * @property {('success'|'member_error'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * Whether the user is allowed to take the sharing action on the file.
 * @typedef {Object} SharingFilePermission
 * @property {SharingFileAction} action - The action that the user may wish to
 * take on the file.
 * @property {boolean} allow - True if the user is allowed to take the action.
 * @property {SharingPermissionDeniedReason} [reason] - The reason why the user
 * is denied the permission. Not present if the action is allowed
 */

/**
 * Actions that may be taken on shared folders.
 * @typedef {Object} SharingFolderAction
 * @property {('change_options'|'edit_contents'|'invite_editor'|'invite_viewer'|'invite_viewer_no_comment'|'relinquish_membership'|'unmount'|'unshare'|'leave_a_copy'|'share_link'|'create_link'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * The metadata of a folder shared link
 * @typedef {Object} SharingFolderLinkMetadata
@property {'folder'} [.tag] - Tag identifying this subtype variant. This field
is only present when needed to discriminate between multiple possible subtypes.
 * @property {string} url - URL of the shared link.
 * @property {string} name - The linked file name (including extension). This
 * never contains a slash.
 * @property {SharingLinkPermissions} link_permissions - The link's access
 * permissions.
 * @property {string} [id] - A unique identifier for the linked file.
 * @property {Timestamp} [expires] - Expiration time, if set. By default the
 * link won't expire.
 * @property {string} [path_lower] - The lowercased full path in the user's
 * Dropbox. This always starts with a slash. This field will only be present
 * only if the linked file is in the authenticated user's  dropbox.
 * @property {SharingTeamMemberInfo} [team_member_info] - The team membership
 * information of the link's owner.  This field will only be present  if the
 * link's owner is a team member.
 * @property {UsersTeam} [content_owner_team_info] - The team information of the
 * content's owner. This field will only be present if the content's owner is a
 * team member and the content's owner team is different from the link's owner
 * team.
 */

/**
 * Whether the user is allowed to take the action on the shared folder.
 * @typedef {Object} SharingFolderPermission
 * @property {SharingFolderAction} action - The action that the user may wish to
 * take on the folder.
 * @property {boolean} allow - True if the user is allowed to take the action.
 * @property {SharingPermissionDeniedReason} [reason] - The reason why the user
 * is denied the permission. Not present if the action is allowed, or if no
 * reason is available.
 */

/**
 * A set of policies governing membership and privileges for a shared folder.
 * @typedef {Object} SharingFolderPolicy
 * @property {SharingAclUpdatePolicy} acl_update_policy - Who can add and remove
 * members from this shared folder.
 * @property {SharingSharedLinkPolicy} shared_link_policy - Who links can be
 * shared with.
 * @property {SharingMemberPolicy} [member_policy] - Who can be a member of this
 * shared folder, as set on the folder itself. The effective policy may differ
 * from this value if the team-wide policy is more restrictive. Present only if
 * the folder is owned by a team.
 * @property {SharingMemberPolicy} [resolved_member_policy] - Who can be a
 * member of this shared folder, taking into account both the folder and the
 * team-wide policy. This value may differ from that of member_policy if the
 * team-wide policy is more restrictive than the folder policy. Present only if
 * the folder is owned by a team.
 */

/**
 * Arguments of get_file_metadata
 * @typedef {Object} SharingGetFileMetadataArg
 * @property {string} file - The file to query.
 * @property {Array.<SharingFileAction>} [actions] - File actions to query.
 */

/**
 * Arguments of get_file_metadata/batch
 * @typedef {Object} SharingGetFileMetadataBatchArg
 * @property {Array.<Object>} files - The files to query.
 * @property {Array.<SharingFileAction>} [actions] - File actions to query.
 */

/**
 * Per file results of get_file_metadata/batch
 * @typedef {Object} SharingGetFileMetadataBatchResult
 * @property {string} file - This is the input file identifier corresponding to
 * one of GetFileMetadataBatchArg.files.
 * @property {SharingGetFileMetadataIndividualResult} result - The result for
 * this particular file
 */

/**
 * Error result for get_file_metadata.
 * @typedef {Object} SharingGetFileMetadataError
 * @property {SharingSharingUserError} [user_error] - Available if .tag is
 * user_error.
 * @property {SharingSharingFileAccessError} [access_error] - Available if .tag
 * is access_error.
 * @property {('user_error'|'access_error'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} SharingGetFileMetadataIndividualResult
 * @property {SharingSharedFileMetadata} [metadata] - Available if .tag is
 * metadata. The result for this file if it was successful.
 * @property {SharingSharingFileAccessError} [access_error] - Available if .tag
 * is access_error. The result for this file if it was an error.
 * @property {('metadata'|'access_error'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} SharingGetMetadataArgs
 * @property {string} shared_folder_id - The ID for the shared folder.
 * @property {Array.<SharingFolderAction>} [actions] - This is a list indicating
 * whether the returned folder data will include a boolean value
 * FolderPermission.allow that describes whether the current user can perform
 * the  FolderAction on the folder.
 */

/**
 * @typedef {Object} SharingGetSharedLinkFileError
 * @property {('shared_link_not_found'|'shared_link_access_denied'|'unsupported_link_type'|'other'|'shared_link_is_directory')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} SharingGetSharedLinkMetadataArg
 * @property {string} url - URL of the shared link.
 * @property {string} [path] - If the shared link is to a folder, this parameter
 * can be used to retrieve the metadata for a specific file or sub-folder in
 * this folder. A relative path should be used.
 * @property {string} [link_password] - If the shared link has a password, this
 * parameter can be used.
 */

/**
 * @typedef {Object} SharingGetSharedLinksArg
 * @property {string} [path] - See get_shared_links description.
 */

/**
 * @typedef {Object} SharingGetSharedLinksError
 * @property {string} [path] - Available if .tag is path.
 * @property {('path'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} SharingGetSharedLinksResult
 * @property
 * {Array.<(SharingPathLinkMetadata|SharingCollectionLinkMetadata|SharingLinkMetadata)>}
 * links - Shared links applicable to the path argument.
 */

/**
 * The information about a group. Groups is a way to manage a list of users  who
 * need same access permission to the shared folder.
 * @typedef {Object} SharingGroupInfo
 * @property {string} group_name
 * @property {string} group_id
 * @property {TeamCommonGroupManagementType} group_management_type - Who is
 * allowed to manage the group.
 * @property {TeamCommonGroupType} group_type - The type of group.
 * @property {boolean} is_member - If the current user is a member of the group.
 * @property {boolean} is_owner - If the current user is an owner of the group.
 * @property {boolean} same_team - If the group is owned by the current user's
 * team.
 * @property {string} [group_external_id] - External ID of group. This is an
 * arbitrary ID that an admin can attach to a group.
 * @property {number} [member_count] - The number of members in the group.
 */

/**
 * The information about a group member of the shared content.
 * @typedef {Object} SharingGroupMembershipInfo
 * @property {SharingAccessLevel} access_type - The access type for this member.
 * @property {SharingGroupInfo} group - The information about the membership
 * group.
 * @property {Array.<SharingMemberPermission>} [permissions] - The permissions
 * that requesting user has on this member. The set of permissions corresponds
 * to the MemberActions in the request.
 * @property {string} [initials] - Suggested name initials for a member.
 * @property {boolean} is_inherited - True if the member has access from a
 * parent folder.
 */

/**
 * @typedef {Object} SharingInsufficientQuotaAmounts
 * @property {number} space_needed - The amount of space needed to add the item
 * (the size of the item).
 * @property {number} space_shortage - The amount of extra space needed to add
 * the item.
 * @property {number} space_left - The amount of space left in the user's
 * Dropbox, less than space_needed.
 */

/**
 * Information about the recipient of a shared content invitation.
 * @typedef {Object} SharingInviteeInfo
 * @property {string} [email] - Available if .tag is email. E-mail address of
 * invited user.
 * @property {('email'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * Information about an invited member of a shared content.
 * @typedef {Object} SharingInviteeMembershipInfo
 * @property {SharingAccessLevel} access_type - The access type for this member.
 * @property {SharingInviteeInfo} invitee - Recipient of the invitation.
 * @property {Array.<SharingMemberPermission>} [permissions] - The permissions
 * that requesting user has on this member. The set of permissions corresponds
 * to the MemberActions in the request.
 * @property {string} [initials] - Suggested name initials for a member.
 * @property {boolean} is_inherited - True if the member has access from a
 * parent folder.
 * @property {SharingUserInfo} [user] - The user this invitation is tied to, if
 * available.
 */

/**
 * Error occurred while performing an asynchronous job from unshare_folder or
 * remove_folder_member.
 * @typedef {Object} SharingJobError
 * @property {SharingUnshareFolderError} [unshare_folder_error] - Available if
 * .tag is unshare_folder_error. Error occurred while performing
 * :route:`unshare_folder` action.
 * @property {SharingRemoveFolderMemberError} [remove_folder_member_error] -
 * Available if .tag is remove_folder_member_error. Error occurred while
 * performing :route:`remove_folder_member` action.
 * @property {SharingRelinquishFolderMembershipError}
 * [relinquish_folder_membership_error] - Available if .tag is
 * relinquish_folder_membership_error. Error occurred while performing
 * :route:`relinquish_folder_membership` action.
 * @property {('unshare_folder_error'|'remove_folder_member_error'|'relinquish_folder_membership_error'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} SharingJobStatus
 * @property {SharingJobError} [failed] - Available if .tag is failed. The
 * asynchronous job returned an error.
 * @property {('in_progress'|'complete'|'failed')} .tag - Tag identifying the union variant.
 */

/**
 * Metadata for a shared link. This can be either a PathLinkMetadata or
 * CollectionLinkMetadata.
 * @typedef {Object} SharingLinkMetadata
@property {("path"|"collection")} .tag - Tag identifying the subtype variant.
 * @property {string} url - URL of the shared link.
 * @property {SharingVisibility} visibility - Who can access the link.
 * @property {Timestamp} [expires] - Expiration time, if set. By default the
 * link won't expire.
 */

/**
 * @typedef {Object} SharingLinkPermissions
 * @property {boolean} can_revoke - Whether the caller can revoke the shared
 * link
 * @property {SharingResolvedVisibility} [resolved_visibility] - The current
 * visibility of the link after considering the shared links policies of the the
 * team (in case the link's owner is part of a team) and the shared folder (in
 * case the linked file is part of a shared folder). This field is shown only if
 * the caller has access to this info (the link's owner always has access to
 * this data).
 * @property {SharingRequestedVisibility} [requested_visibility] - The shared
 * link's requested visibility. This can be overridden by the team and shared
 * folder policies. The final visibility, after considering these policies, can
 * be found in resolved_visibility. This is shown only if the caller is the
 * link's owner.
 * @property {SharingSharedLinkAccessFailureReason} [revoke_failure_reason] -
 * The failure reason for revoking the link. This field will only be present if
 * the can_revoke is false.
 */

/**
 * Arguments for list_file_members.
 * @typedef {Object} SharingListFileMembersArg
 * @property {string} file - The file for which you want to see members.
 * @property {Array.<SharingMemberAction>} [actions] - The actions for which to
 * return permissions on a member
 * @property {boolean} include_inherited - Whether to include members who only
 * have access from a parent shared folder.
 * @property {number} limit - Number of members to return max per query.
 * Defaults to 100 if no limit is specified.
 */

/**
 * Arguments for list_file_members/batch.
 * @typedef {Object} SharingListFileMembersBatchArg
 * @property {Array.<Object>} files - Files for which to return members.
 * @property {number} limit - Number of members to return max per query.
 * Defaults to 10 if no limit is specified.
 */

/**
 * Per-file result for list_file_members/batch.
 * @typedef {Object} SharingListFileMembersBatchResult
 * @property {string} file - This is the input file identifier, whether an ID or
 * a path.
 * @property {SharingListFileMembersIndividualResult} result - The result for
 * this particular file
 */

/**
 * Arguments for list_file_members/continue.
 * @typedef {Object} SharingListFileMembersContinueArg
 * @property {string} cursor - The cursor returned by your last call to
 * list_file_members, list_file_members/continue, or list_file_members/batch.
 */

/**
 * Error for list_file_members/continue.
 * @typedef {Object} SharingListFileMembersContinueError
 * @property {SharingSharingUserError} [user_error] - Available if .tag is
 * user_error.
 * @property {SharingSharingFileAccessError} [access_error] - Available if .tag
 * is access_error.
 * @property {('user_error'|'access_error'|'invalid_cursor'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} SharingListFileMembersCountResult
 * @property {SharingSharedFileMembers} members - A list of members on this
 * file.
 * @property {number} member_count - The number of members on this file. This
 * does not include inherited members
 */

/**
 * Error for list_file_members.
 * @typedef {Object} SharingListFileMembersError
 * @property {SharingSharingUserError} [user_error] - Available if .tag is
 * user_error.
 * @property {SharingSharingFileAccessError} [access_error] - Available if .tag
 * is access_error.
 * @property {('user_error'|'access_error'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} SharingListFileMembersIndividualResult
 * @property {SharingListFileMembersCountResult} [result] - Available if .tag is
 * result. The results of the query for this file if it was successful
 * @property {SharingSharingFileAccessError} [access_error] - Available if .tag
 * is access_error. The result of the query for this file if it was an error.
 * @property {('result'|'access_error'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * Arguments for list_received_files.
 * @typedef {Object} SharingListFilesArg
 * @property {number} limit - Number of files to return max per query. Defaults
 * to 100 if no limit is specified.
 * @property {Array.<SharingFileAction>} [actions] - File actions to query.
 */

/**
 * Arguments for list_received_files/continue.
 * @typedef {Object} SharingListFilesContinueArg
 * @property {string} cursor - Cursor in ListFilesResult.cursor
 */

/**
 * Error results for list_received_files/continue.
 * @typedef {Object} SharingListFilesContinueError
 * @property {SharingSharingUserError} [user_error] - Available if .tag is
 * user_error. User account had a problem.
 * @property {('user_error'|'invalid_cursor'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * Success results for list_received_files.
 * @typedef {Object} SharingListFilesResult
 * @property {Array.<SharingSharedFileMetadata>} entries - Information about the
 * files shared with current user.
 * @property {string} [cursor] - Cursor used to obtain additional shared files.
 */

/**
 * @typedef {Object} SharingListFolderMembersArgs
 * @property {string} shared_folder_id - The ID for the shared folder.
 * @property {Array.<SharingMemberAction>} [actions] - This is a list indicating
 * whether each returned member will include a boolean value
 * MemberPermission.allow that describes whether the current user can perform
 * the MemberAction on the member.
 * @property {number} limit - The maximum number of results that include
 * members, groups and invitees to return per request.
 */

/**
 * @typedef {Object} SharingListFolderMembersContinueArg
 * @property {string} cursor - The cursor returned by your last call to
 * list_folder_members or list_folder_members/continue.
 */

/**
 * @typedef {Object} SharingListFolderMembersContinueError
 * @property {SharingSharedFolderAccessError} [access_error] - Available if .tag
 * is access_error.
 * @property {('access_error'|'invalid_cursor'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} SharingListFolderMembersCursorArg
 * @property {Array.<SharingMemberAction>} [actions] - This is a list indicating
 * whether each returned member will include a boolean value
 * MemberPermission.allow that describes whether the current user can perform
 * the MemberAction on the member.
 * @property {number} limit - The maximum number of results that include
 * members, groups and invitees to return per request.
 */

/**
 * @typedef {Object} SharingListFoldersArgs
 * @property {number} limit - The maximum number of results to return per
 * request.
 * @property {Array.<SharingFolderAction>} [actions] - This is a list indicating
 * whether each returned folder data entry will include a boolean field
 * FolderPermission.allow that describes whether the current user can perform
 * the `FolderAction` on the folder.
 */

/**
 * @typedef {Object} SharingListFoldersContinueArg
 * @property {string} cursor - The cursor returned by the previous API call
 * specified in the endpoint description.
 */

/**
 * @typedef {Object} SharingListFoldersContinueError
 * @property {('invalid_cursor'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * Result for list_folders or list_mountable_folders, depending on which
 * endpoint was requested. Unmounted shared folders can be identified by the
 * absence of SharedFolderMetadata.path_lower.
 * @typedef {Object} SharingListFoldersResult
 * @property {Array.<SharingSharedFolderMetadata>} entries - List of all shared
 * folders the authenticated user has access to.
 * @property {string} [cursor] - Present if there are additional shared folders
 * that have not been returned yet. Pass the cursor into the corresponding
 * continue endpoint (either list_folders/continue or
 * list_mountable_folders/continue) to list additional folders.
 */

/**
 * @typedef {Object} SharingListSharedLinksArg
 * @property {string} [path] - See list_shared_links description.
 * @property {string} [cursor] - The cursor returned by your last call to
 * list_shared_links.
 * @property {boolean} [direct_only] - See list_shared_links description.
 */

/**
 * @typedef {Object} SharingListSharedLinksError
 * @property {FilesLookupError} [path] - Available if .tag is path.
 * @property {('path'|'reset'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} SharingListSharedLinksResult
 * @property
 * {Array.<(SharingFileLinkMetadata|SharingFolderLinkMetadata|SharingSharedLinkMetadata)>}
 * links - Shared links applicable to the path argument.
 * @property {boolean} has_more - Is true if there are additional shared links
 * that have not been returned yet. Pass the cursor into list_shared_links to
 * retrieve them.
 * @property {string} [cursor] - Pass the cursor into list_shared_links to
 * obtain the additional links. Cursor is returned only if no path is given.
 */

/**
 * Contains information about a member's access level to content after an
 * operation.
 * @typedef {Object} SharingMemberAccessLevelResult
 * @property {SharingAccessLevel} [access_level] - The member still has this
 * level of access to the content through a parent folder.
 * @property {string} [warning] - A localized string with additional information
 * about why the user has this access level to the content.
 * @property {Array.<SharingParentFolderAccessInfo>} [access_details] - The
 * parent folders that a member has access to. The field is present if the user
 * has access to the first parent folder where the member gains access.
 */

/**
 * Actions that may be taken on members of a shared folder.
 * @typedef {Object} SharingMemberAction
 * @property {('leave_a_copy'|'make_editor'|'make_owner'|'make_viewer'|'make_viewer_no_comment'|'remove'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * Whether the user is allowed to take the action on the associated member.
 * @typedef {Object} SharingMemberPermission
 * @property {SharingMemberAction} action - The action that the user may wish to
 * take on the member.
 * @property {boolean} allow - True if the user is allowed to take the action.
 * @property {SharingPermissionDeniedReason} [reason] - The reason why the user
 * is denied the permission. Not present if the action is allowed
 */

/**
 * Policy governing who can be a member of a shared folder. Only applicable to
 * folders owned by a user on a team.
 * @typedef {Object} SharingMemberPolicy
 * @property {('team'|'anyone'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * Includes different ways to identify a member of a shared folder.
 * @typedef {Object} SharingMemberSelector
 * @property {string} [dropbox_id] - Available if .tag is dropbox_id. Dropbox
 * account, team member, or group ID of member.
 * @property {string} [email] - Available if .tag is email. E-mail address of
 * member.
 * @property {('dropbox_id'|'email'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * The information about a member of the shared content.
 * @typedef {Object} SharingMembershipInfo
 * @property {SharingAccessLevel} access_type - The access type for this member.
 * @property {Array.<SharingMemberPermission>} [permissions] - The permissions
 * that requesting user has on this member. The set of permissions corresponds
 * to the MemberActions in the request.
 * @property {string} [initials] - Suggested name initials for a member.
 * @property {boolean} is_inherited - True if the member has access from a
 * parent folder.
 */

/**
 * @typedef {Object} SharingModifySharedLinkSettingsArgs
 * @property {string} url - URL of the shared link to change its settings
 * @property {SharingSharedLinkSettings} settings - Set of settings for the
 * shared link.
 * @property {boolean} remove_expiration - If set to true, removes the
 * expiration of the shared link.
 */

/**
 * @typedef {Object} SharingModifySharedLinkSettingsError
 * @property {SharingSharedLinkSettingsError} [settings_error] - Available if
 * .tag is settings_error. There is an error with the given settings
 * @property {('shared_link_not_found'|'shared_link_access_denied'|'unsupported_link_type'|'other'|'settings_error'|'email_not_verified')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} SharingMountFolderArg
 * @property {string} shared_folder_id - The ID of the shared folder to mount.
 */

/**
 * @typedef {Object} SharingMountFolderError
 * @property {SharingSharedFolderAccessError} [access_error] - Available if .tag
 * is access_error.
 * @property {SharingInsufficientQuotaAmounts} [insufficient_quota] - Available
 * if .tag is insufficient_quota. The current user does not have enough space to
 * mount the shared folder.
 * @property {('access_error'|'inside_shared_folder'|'insufficient_quota'|'already_mounted'|'no_permission'|'not_mountable'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * Contains information about a parent folder that a member has access to.
 * @typedef {Object} SharingParentFolderAccessInfo
 * @property {string} folder_name - Display name for the folder.
 * @property {string} shared_folder_id - The identifier of the parent shared
 * folder.
 * @property {Array.<SharingMemberPermission>} permissions - The user's
 * permissions for the parent shared folder.
 */

/**
 * Metadata for a path-based shared link.
 * @typedef {Object} SharingPathLinkMetadata
@property {'path'} [.tag] - Tag identifying this subtype variant. This field is
only present when needed to discriminate between multiple possible subtypes.
 * @property {string} url - URL of the shared link.
 * @property {SharingVisibility} visibility - Who can access the link.
 * @property {string} path - Path in user's Dropbox.
 * @property {Timestamp} [expires] - Expiration time, if set. By default the
 * link won't expire.
 */

/**
 * Flag to indicate pending upload default (for linking to not-yet-existing
 * paths).
 * @typedef {Object} SharingPendingUploadMode
 * @property {('file'|'folder')} .tag - Tag identifying the union variant.
 */

/**
 * Possible reasons the user is denied a permission.
 * @typedef {Object} SharingPermissionDeniedReason
 * @property {('user_not_same_team_as_owner'|'user_not_allowed_by_owner'|'target_is_indirect_member'|'target_is_owner'|'target_is_self'|'target_not_active'|'folder_is_limited_team_folder'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} SharingRelinquishFileMembershipArg
 * @property {string} file - The path or id for the file.
 */

/**
 * @typedef {Object} SharingRelinquishFileMembershipError
 * @property {SharingSharingFileAccessError} [access_error] - Available if .tag
 * is access_error.
 * @property {('access_error'|'group_access'|'no_permission'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} SharingRelinquishFolderMembershipArg
 * @property {string} shared_folder_id - The ID for the shared folder.
 * @property {boolean} leave_a_copy - Keep a copy of the folder's contents upon
 * relinquishing membership.
 */

/**
 * @typedef {Object} SharingRelinquishFolderMembershipError
 * @property {SharingSharedFolderAccessError} [access_error] - Available if .tag
 * is access_error.
 * @property {('access_error'|'folder_owner'|'mounted'|'group_access'|'team_folder'|'no_permission'|'no_explicit_access'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * Arguments for remove_file_member_2.
 * @typedef {Object} SharingRemoveFileMemberArg
 * @property {string} file - File from which to remove members.
 * @property {SharingMemberSelector} member - Member to remove from this file.
 * Note that even if an email is specified, it may result in the removal of a
 * user (not an invitee) if the user's main account corresponds to that email
 * address.
 */

/**
 * Errors for remove_file_member_2.
 * @typedef {Object} SharingRemoveFileMemberError
 * @property {SharingSharingUserError} [user_error] - Available if .tag is
 * user_error.
 * @property {SharingSharingFileAccessError} [access_error] - Available if .tag
 * is access_error.
 * @property {SharingMemberAccessLevelResult} [no_explicit_access] - Available
 * if .tag is no_explicit_access. This member does not have explicit access to
 * the file and therefore cannot be removed. The return value is the access that
 * a user might have to the file from a parent folder.
 * @property {('user_error'|'access_error'|'no_explicit_access'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} SharingRemoveFolderMemberArg
 * @property {string} shared_folder_id - The ID for the shared folder.
 * @property {SharingMemberSelector} member - The member to remove from the
 * folder.
 * @property {boolean} leave_a_copy - If true, the removed user will keep their
 * copy of the folder after it's unshared, assuming it was mounted. Otherwise,
 * it will be removed from their Dropbox. Also, this must be set to false when
 * kicking a group.
 */

/**
 * @typedef {Object} SharingRemoveFolderMemberError
 * @property {SharingSharedFolderAccessError} [access_error] - Available if .tag
 * is access_error.
 * @property {SharingSharedFolderMemberError} [member_error] - Available if .tag
 * is member_error.
 * @property {('access_error'|'member_error'|'folder_owner'|'group_access'|'team_folder'|'no_permission'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} SharingRemoveMemberJobStatus
 * @property {SharingMemberAccessLevelResult} [complete] - Available if .tag is
 * complete. Removing the folder member has finished. The value is information
 * about whether the member has another form of access.
 * @property {SharingRemoveFolderMemberError} [failed] - Available if .tag is
 * failed.
 * @property {('in_progress'|'complete'|'failed')} .tag - Tag identifying the union variant.
 */

/**
 * The access permission that can be requested by the caller for the shared
 * link. Note that the final resolved visibility of the shared link takes into
 * account other aspects, such as team and shared folder settings. Check the
 * ResolvedVisibility for more info on the possible resolved visibility values
 * of shared links.
 * @typedef {Object} SharingRequestedVisibility
 * @property {('public'|'team_only'|'password')} .tag - Tag identifying the union variant.
 */

/**
 * The actual access permissions values of shared links after taking into
 * account user preferences and the team and shared folder settings. Check the
 * RequestedVisibility for more info on the possible visibility values that can
 * be set by the shared link's owner.
 * @typedef {Object} SharingResolvedVisibility
 * @property {('public'|'team_only'|'password'|'team_and_password'|'shared_folder_only'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} SharingRevokeSharedLinkArg
 * @property {string} url - URL of the shared link.
 */

/**
 * @typedef {Object} SharingRevokeSharedLinkError
 * @property {('shared_link_not_found'|'shared_link_access_denied'|'unsupported_link_type'|'other'|'shared_link_malformed')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} SharingShareFolderArg
 * @property {string} path - The path to the folder to share. If it does not
 * exist, then a new one is created.
 * @property {SharingMemberPolicy} member_policy - Who can be a member of this
 * shared folder. Only applicable if the current user is on a team.
 * @property {SharingAclUpdatePolicy} acl_update_policy - Who can add and remove
 * members of this shared folder.
 * @property {SharingSharedLinkPolicy} shared_link_policy - The policy to apply
 * to shared links created for content inside this shared folder.  The current
 * user must be on a team to set this policy to SharedLinkPolicy.members.
 * @property {boolean} force_async - Whether to force the share to happen
 * asynchronously.
 */

/**
 * @typedef {Object} SharingShareFolderError
 * @property {SharingSharePathError} [bad_path] - Available if .tag is bad_path.
 * :field:`ShareFolderArg.path` is invalid.
 * @property {('email_unverified'|'bad_path'|'team_policy_disallows_member_policy'|'disallowed_shared_link_policy'|'other'|'no_permission')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} SharingShareFolderErrorBase
 * @property {SharingSharePathError} [bad_path] - Available if .tag is bad_path.
 * :field:`ShareFolderArg.path` is invalid.
 * @property {('email_unverified'|'bad_path'|'team_policy_disallows_member_policy'|'disallowed_shared_link_policy'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} SharingShareFolderJobStatus
 * @property {SharingSharedFolderMetadata} [complete] - Available if .tag is
 * complete. The share job has finished. The value is the metadata for the
 * folder.
 * @property {SharingShareFolderError} [failed] - Available if .tag is failed.
 * @property {('in_progress'|'complete'|'failed')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} SharingShareFolderLaunch
 * @property {string} [async_job_id] - Available if .tag is async_job_id. This
 * response indicates that the processing is asynchronous. The string is an id
 * that can be used to obtain the status of the asynchronous job.
 * @property {SharingSharedFolderMetadata} [complete] - Available if .tag is
 * complete.
 * @property {('async_job_id'|'complete')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} SharingSharePathError
 * @property {SharingSharedFolderMetadata} [already_shared] - Available if .tag
 * is already_shared. Folder is already shared. Contains metadata about the
 * existing shared folder.
 * @property {FilesPathRootError} [invalid_path_root] - Available if .tag is
 * invalid_path_root. The path root parameter provided is invalid.
 * @property {('is_file'|'inside_shared_folder'|'contains_shared_folder'|'contains_app_folder'|'contains_team_folder'|'is_app_folder'|'inside_app_folder'|'is_public_folder'|'inside_public_folder'|'already_shared'|'invalid_path'|'is_osx_package'|'inside_osx_package'|'invalid_path_root'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * Shared file user, group, and invitee membership. Used for the results of
 * list_file_members and list_file_members/continue, and used as part of the
 * results for list_file_members/batch.
 * @typedef {Object} SharingSharedFileMembers
 * @property {Array.<SharingUserMembershipInfo>} users - The list of user
 * members of the shared file.
 * @property {Array.<SharingGroupMembershipInfo>} groups - The list of group
 * members of the shared file.
 * @property {Array.<SharingInviteeMembershipInfo>} invitees - The list of
 * invited members of a file, but have not logged in and claimed this.
 * @property {string} [cursor] - Present if there are additional shared file
 * members that have not been returned yet. Pass the cursor into
 * list_file_members/continue to list additional members.
 */

/**
 * Properties of the shared file.
 * @typedef {Object} SharingSharedFileMetadata
 * @property {SharingFolderPolicy} policy - Policies governing this shared file.
 * @property {string} preview_url - URL for displaying a web preview of the
 * shared file.
 * @property {string} name - The name of this file.
 * @property {string} id - The ID of the file.
 * @property {Array.<SharingFilePermission>} [permissions] - The sharing
 * permissions that requesting user has on this file. This corresponds to the
 * entries given in GetFileMetadataBatchArg.actions or
 * GetFileMetadataArg.actions.
 * @property {UsersTeam} [owner_team] - The team that owns the file. This field
 * is not present if the file is not owned by a team.
 * @property {string} [parent_shared_folder_id] - The ID of the parent shared
 * folder. This field is present only if the file is contained within a shared
 * folder.
 * @property {string} [path_lower] - The lower-case full path of this file.
 * Absent for unmounted files.
 * @property {string} [path_display] - The cased path to be used for display
 * purposes only. In rare instances the casing will not correctly match the
 * user's filesystem, but this behavior will match the path provided in the Core
 * API v1. Absent for unmounted files.
 * @property {Timestamp} [time_invited] - Timestamp indicating when the current
 * user was invited to this shared file. If the user was not invited to the
 * shared file, the timestamp will indicate when the user was invited to the
 * parent shared folder. This value may be absent.
 */

/**
 * There is an error accessing the shared folder.
 * @typedef {Object} SharingSharedFolderAccessError
 * @property {('invalid_id'|'not_a_member'|'email_unverified'|'unmounted'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} SharingSharedFolderMemberError
 * @property {SharingMemberAccessLevelResult} [no_explicit_access] - Available
 * if .tag is no_explicit_access. The target member only has inherited access to
 * the shared folder.
 * @property {('invalid_dropbox_id'|'not_a_member'|'no_explicit_access'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * Shared folder user and group membership.
 * @typedef {Object} SharingSharedFolderMembers
 * @property {Array.<SharingUserMembershipInfo>} users - The list of user
 * members of the shared folder.
 * @property {Array.<SharingGroupMembershipInfo>} groups - The list of group
 * members of the shared folder.
 * @property {Array.<SharingInviteeMembershipInfo>} invitees - The list of
 * invitees to the shared folder.
 * @property {string} [cursor] - Present if there are additional shared folder
 * members that have not been returned yet. Pass the cursor into
 * list_folder_members/continue to list additional members.
 */

/**
 * The metadata which includes basic information about the shared folder.
 * @typedef {Object} SharingSharedFolderMetadata
 * @property {SharingAccessLevel} access_type - The current user's access level
 * for this shared folder.
 * @property {boolean} is_team_folder - Whether this folder is a team folder
 * https://www.dropbox.com/en/help/986.
 * @property {SharingFolderPolicy} policy - Policies governing this shared
 * folder.
 * @property {string} name - The name of the this shared folder.
 * @property {string} shared_folder_id - The ID of the shared folder.
 * @property {Timestamp} time_invited - Timestamp indicating when the current
 * user was invited to this shared folder.
 * @property {string} preview_url - URL for displaying a web preview of the
 * shared folder.
 * @property {UsersTeam} [owner_team] - The team that owns the folder. This
 * field is not present if the folder is not owned by a team.
 * @property {string} [parent_shared_folder_id] - The ID of the parent shared
 * folder. This field is present only if the folder is contained within another
 * shared folder.
 * @property {string} [path_lower] - The lower-cased full path of this shared
 * folder. Absent for unmounted folders.
 * @property {Array.<SharingFolderPermission>} [permissions] - Actions the
 * current user may perform on the folder and its contents. The set of
 * permissions corresponds to the FolderActions in the request.
 */

/**
 * Properties of the shared folder.
 * @typedef {Object} SharingSharedFolderMetadataBase
 * @property {SharingAccessLevel} access_type - The current user's access level
 * for this shared folder.
 * @property {boolean} is_team_folder - Whether this folder is a team folder
 * https://www.dropbox.com/en/help/986.
 * @property {SharingFolderPolicy} policy - Policies governing this shared
 * folder.
 * @property {UsersTeam} [owner_team] - The team that owns the folder. This
 * field is not present if the folder is not owned by a team.
 * @property {string} [parent_shared_folder_id] - The ID of the parent shared
 * folder. This field is present only if the folder is contained within another
 * shared folder.
 */

/**
 * @typedef {Object} SharingSharedLinkAccessFailureReason
 * @property {('login_required'|'email_verify_required'|'password_required'|'team_only'|'owner_only'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} SharingSharedLinkError
 * @property {('shared_link_not_found'|'shared_link_access_denied'|'unsupported_link_type'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * The metadata of a shared link
 * @typedef {Object} SharingSharedLinkMetadata
@property {("file"|"folder")} .tag - Tag identifying the subtype variant.
 * @property {string} url - URL of the shared link.
 * @property {string} name - The linked file name (including extension). This
 * never contains a slash.
 * @property {SharingLinkPermissions} link_permissions - The link's access
 * permissions.
 * @property {string} [id] - A unique identifier for the linked file.
 * @property {Timestamp} [expires] - Expiration time, if set. By default the
 * link won't expire.
 * @property {string} [path_lower] - The lowercased full path in the user's
 * Dropbox. This always starts with a slash. This field will only be present
 * only if the linked file is in the authenticated user's  dropbox.
 * @property {SharingTeamMemberInfo} [team_member_info] - The team membership
 * information of the link's owner.  This field will only be present  if the
 * link's owner is a team member.
 * @property {UsersTeam} [content_owner_team_info] - The team information of the
 * content's owner. This field will only be present if the content's owner is a
 * team member and the content's owner team is different from the link's owner
 * team.
 */

/**
 * Policy governing who can view shared links.
 * @typedef {Object} SharingSharedLinkPolicy
 * @property {('anyone'|'members'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} SharingSharedLinkSettings
 * @property {SharingRequestedVisibility} [requested_visibility] - The requested
 * access for this shared link.
 * @property {string} [link_password] - If requested_visibility is
 * RequestedVisibility.password this is needed to specify the password to access
 * the link.
 * @property {Timestamp} [expires] - Expiration time of the shared link. By
 * default the link won't expire.
 */

/**
 * @typedef {Object} SharingSharedLinkSettingsError
 * @property {('invalid_settings'|'not_authorized')} .tag - Tag identifying the union variant.
 */

/**
 * User could not access this file.
 * @typedef {Object} SharingSharingFileAccessError
 * @property {('no_permission'|'invalid_file'|'is_folder'|'inside_public_folder'|'inside_osx_package'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * User account had a problem preventing this action.
 * @typedef {Object} SharingSharingUserError
 * @property {('email_unverified'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * Information about a team member.
 * @typedef {Object} SharingTeamMemberInfo
 * @property {UsersTeam} team_info - Information about the member's team
 * @property {string} display_name - The display name of the user.
 * @property {string} [member_id] - ID of user as a member of a team. This field
 * will only be present if the member is in the same team as current user.
 */

/**
 * @typedef {Object} SharingTransferFolderArg
 * @property {string} shared_folder_id - The ID for the shared folder.
 * @property {string} to_dropbox_id - A account or team member ID to transfer
 * ownership to.
 */

/**
 * @typedef {Object} SharingTransferFolderError
 * @property {SharingSharedFolderAccessError} [access_error] - Available if .tag
 * is access_error.
 * @property {('access_error'|'invalid_dropbox_id'|'new_owner_not_a_member'|'new_owner_unmounted'|'new_owner_email_unverified'|'team_folder'|'no_permission'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} SharingUnmountFolderArg
 * @property {string} shared_folder_id - The ID for the shared folder.
 */

/**
 * @typedef {Object} SharingUnmountFolderError
 * @property {SharingSharedFolderAccessError} [access_error] - Available if .tag
 * is access_error.
 * @property {('access_error'|'no_permission'|'not_unmountable'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * Arguments for unshare_file.
 * @typedef {Object} SharingUnshareFileArg
 * @property {string} file - The file to unshare.
 */

/**
 * Error result for unshare_file.
 * @typedef {Object} SharingUnshareFileError
 * @property {SharingSharingUserError} [user_error] - Available if .tag is
 * user_error.
 * @property {SharingSharingFileAccessError} [access_error] - Available if .tag
 * is access_error.
 * @property {('user_error'|'access_error'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} SharingUnshareFolderArg
 * @property {string} shared_folder_id - The ID for the shared folder.
 * @property {boolean} leave_a_copy - If true, members of this shared folder
 * will get a copy of this folder after it's unshared. Otherwise, it will be
 * removed from their Dropbox. The current user, who is an owner, will always
 * retain their copy.
 */

/**
 * @typedef {Object} SharingUnshareFolderError
 * @property {SharingSharedFolderAccessError} [access_error] - Available if .tag
 * is access_error.
 * @property {('access_error'|'team_folder'|'no_permission'|'too_many_files'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} SharingUpdateFolderMemberArg
 * @property {string} shared_folder_id - The ID for the shared folder.
 * @property {SharingMemberSelector} member - The member of the shared folder to
 * update.  Only the MemberSelector.dropbox_id may be set at this time.
 * @property {SharingAccessLevel} access_level - The new access level for
 * member. AccessLevel.owner is disallowed.
 */

/**
 * @typedef {Object} SharingUpdateFolderMemberError
 * @property {SharingSharedFolderAccessError} [access_error] - Available if .tag
 * is access_error.
 * @property {SharingSharedFolderMemberError} [member_error] - Available if .tag
 * is member_error.
 * @property {SharingAddFolderMemberError} [no_explicit_access] - Available if
 * .tag is no_explicit_access. If updating the access type required the member
 * to be added to the shared folder and there was an error when adding the
 * member.
 * @property {('access_error'|'member_error'|'no_explicit_access'|'insufficient_plan'|'no_permission'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * If any of the policy's are unset, then they retain their current setting.
 * @typedef {Object} SharingUpdateFolderPolicyArg
 * @property {string} shared_folder_id - The ID for the shared folder.
 * @property {SharingMemberPolicy} [member_policy] - Who can be a member of this
 * shared folder. Only applicable if the current user is on a team.
 * @property {SharingAclUpdatePolicy} [acl_update_policy] - Who can add and
 * remove members of this shared folder.
 * @property {SharingSharedLinkPolicy} [shared_link_policy] - The policy to
 * apply to shared links created for content inside this shared folder. The
 * current user must be on a team to set this policy to
 * SharedLinkPolicy.members.
 */

/**
 * @typedef {Object} SharingUpdateFolderPolicyError
 * @property {SharingSharedFolderAccessError} [access_error] - Available if .tag
 * is access_error.
 * @property {('access_error'|'not_on_team'|'team_policy_disallows_member_policy'|'disallowed_shared_link_policy'|'no_permission'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * Basic information about a user. Use users.get_account and
 * users.get_account_batch to obtain more detailed information.
 * @typedef {Object} SharingUserInfo
 * @property {string} account_id - The account ID of the user.
 * @property {boolean} same_team - If the user is in the same team as current
 * user.
 * @property {string} [team_member_id] - The team member ID of the shared folder
 * member. Only present if same_team is true.
 */

/**
 * The information about a user member of the shared content.
 * @typedef {Object} SharingUserMembershipInfo
 * @property {SharingAccessLevel} access_type - The access type for this member.
 * @property {SharingUserInfo} user - The account information for the membership
 * user.
 * @property {Array.<SharingMemberPermission>} [permissions] - The permissions
 * that requesting user has on this member. The set of permissions corresponds
 * to the MemberActions in the request.
 * @property {string} [initials] - Suggested name initials for a member.
 * @property {boolean} is_inherited - True if the member has access from a
 * parent folder.
 */

/**
 * Who can access a shared link. The most open visibility is public. The default
 * depends on many aspects, such as team and user preferences and shared folder
 * settings.
 * @typedef {Object} SharingVisibility
 * @property {('public'|'team_only'|'password'|'team_and_password'|'shared_folder_only'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * Information on active web sessions
 * @typedef {Object} TeamActiveWebSession
 * @property {string} session_id - The session id
 * @property {string} user_agent - Information on the hosting device
 * @property {string} os - Information on the hosting operating system
 * @property {string} browser - Information on the browser used for this web
 * session
 * @property {string} [ip_address] - The IP address of the last activity from
 * this session
 * @property {string} [country] - The country from which the last activity from
 * this session was made
 * @property {Timestamp} [created] - The time this session was created
 * @property {Timestamp} [updated] - The time of the last activity from this
 * session
 */

/**
 * Arguments for adding property templates.
 * @typedef {Object} TeamAddPropertyTemplateArg
 * @property {string} name - A display name for the property template. Property
 * template names can be up to 256 bytes.
 * @property {string} description - Description for new property template.
 * Property template descriptions can be up to 1024 bytes.
 * @property {Array.<PropertiesPropertyFieldTemplate>} fields - This is a list
 * of custom properties associated with a property template. There can be up to
 * 64 properties in a single property template.
 */

/**
 * @typedef {Object} TeamAddPropertyTemplateResult
 * @property {string} template_id - An identifier for property template added by
 * properties/template/add.
 */

/**
 * Describes which team-related admin permissions a user has.
 * @typedef {Object} TeamAdminTier
 * @property {('team_admin'|'user_management_admin'|'support_admin'|'member_only')} .tag - Tag identifying the union variant.
 */

/**
 * Information on linked third party applications
 * @typedef {Object} TeamApiApp
 * @property {string} app_id - The application unique id
 * @property {string} app_name - The application name
 * @property {boolean} is_app_folder - Whether the linked application uses a
 * dedicated folder
 * @property {string} [publisher] - The application publisher name
 * @property {string} [publisher_url] - The publisher's URL
 * @property {Timestamp} [linked] - The time this application was linked
 */

/**
 * Base report structure.
 * @typedef {Object} TeamBaseDfbReport
 * @property {string} start_date - First date present in the results as
 * 'YYYY-MM-DD' or None.
 */

/**
 * Input arguments that can be provided for most reports.
 * @typedef {Object} TeamDateRange
 * @property {Timestamp} [start_date] - Optional starting date (inclusive)
 * @property {Timestamp} [end_date] - Optional ending date (exclusive)
 */

/**
 * Errors that can originate from problems in input arguments to reports.
 * @typedef {Object} TeamDateRangeError
 * @property {'other'} .tag - Tag identifying the union variant.
 */

/**
 * Information about linked Dropbox desktop client sessions
 * @typedef {Object} TeamDesktopClientSession
 * @property {string} session_id - The session id
 * @property {string} host_name - Name of the hosting desktop
 * @property {TeamDesktopPlatform} client_type - The Dropbox desktop client type
 * @property {string} client_version - The Dropbox client version
 * @property {string} platform - Information on the hosting platform
 * @property {boolean} is_delete_on_unlink_supported - Whether it's possible to
 * delete all of the account files upon unlinking
 * @property {string} [ip_address] - The IP address of the last activity from
 * this session
 * @property {string} [country] - The country from which the last activity from
 * this session was made
 * @property {Timestamp} [created] - The time this session was created
 * @property {Timestamp} [updated] - The time of the last activity from this
 * session
 */

/**
 * @typedef {Object} TeamDesktopPlatform
 * @property {('windows'|'mac'|'linux'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamDeviceSession
 * @property {string} session_id - The session id
 * @property {string} [ip_address] - The IP address of the last activity from
 * this session
 * @property {string} [country] - The country from which the last activity from
 * this session was made
 * @property {Timestamp} [created] - The time this session was created
 * @property {Timestamp} [updated] - The time of the last activity from this
 * session
 */

/**
 * @typedef {Object} TeamDeviceSessionArg
 * @property {string} session_id - The session id
 * @property {string} team_member_id - The unique id of the member owning the
 * device
 */

/**
 * Each of the items is an array of values, one value per day. The value is the
 * number of devices active within a time window, ending with that day. If there
 * is no data for a day, then the value will be None.
 * @typedef {Object} TeamDevicesActive
 * @property {Array.<Object>} windows - Array of number of linked windows
 * (desktop) clients with activity.
 * @property {Array.<Object>} macos - Array of number of linked mac (desktop)
 * clients with activity.
 * @property {Array.<Object>} linux - Array of number of linked linus (desktop)
 * clients with activity.
 * @property {Array.<Object>} ios - Array of number of linked ios devices with
 * activity.
 * @property {Array.<Object>} android - Array of number of linked android
 * devices with activity.
 * @property {Array.<Object>} other - Array of number of other linked devices
 * (blackberry, windows phone, etc)  with activity.
 * @property {Array.<Object>} total - Array of total number of linked clients
 * with activity.
 */

/**
 * Activity Report Result. Each of the items in the storage report is an array
 * of values, one value per day. If there is no data for a day, then the value
 * will be None.
 * @typedef {Object} TeamGetActivityReport
 * @property {string} start_date - First date present in the results as
 * 'YYYY-MM-DD' or None.
 * @property {Array.<Object>} adds - Array of total number of adds by team
 * members.
 * @property {Array.<Object>} edits - Array of number of edits by team members.
 * If the same user edits the same file multiple times this is counted as a
 * single edit.
 * @property {Array.<Object>} deletes - Array of total number of deletes by team
 * members.
 * @property {Array.<Object>} active_users_28_day - Array of the number of users
 * who have been active in the last 28 days.
 * @property {Array.<Object>} active_users_7_day - Array of the number of users
 * who have been active in the last week.
 * @property {Array.<Object>} active_users_1_day - Array of the number of users
 * who have been active in the last day.
 * @property {Array.<Object>} active_shared_folders_28_day - Array of the number
 * of shared folders with some activity in the last 28 days.
 * @property {Array.<Object>} active_shared_folders_7_day - Array of the number
 * of shared folders with some activity in the last week.
 * @property {Array.<Object>} active_shared_folders_1_day - Array of the number
 * of shared folders with some activity in the last day.
 * @property {Array.<Object>} shared_links_created - Array of the number of
 * shared links created.
 * @property {Array.<Object>} shared_links_viewed_by_team - Array of the number
 * of views by team users to shared links created by the team.
 * @property {Array.<Object>} shared_links_viewed_by_outside_user - Array of the
 * number of views by users outside of the team to shared links created by the
 * team.
 * @property {Array.<Object>} shared_links_viewed_by_not_logged_in - Array of
 * the number of views by non-logged-in users to shared links created by the
 * team.
 * @property {Array.<Object>} shared_links_viewed_total - Array of the total
 * number of views to shared links created by the team.
 */

/**
 * Devices Report Result. Contains subsections for different time ranges of
 * activity. Each of the items in each subsection of the storage report is an
 * array of values, one value per day. If there is no data for a day, then the
 * value will be None.
 * @typedef {Object} TeamGetDevicesReport
 * @property {string} start_date - First date present in the results as
 * 'YYYY-MM-DD' or None.
 * @property {TeamDevicesActive} active_1_day - Report of the number of devices
 * active in the last day.
 * @property {TeamDevicesActive} active_7_day - Report of the number of devices
 * active in the last 7 days.
 * @property {TeamDevicesActive} active_28_day - Report of the number of devices
 * active in the last 28 days.
 */

/**
 * Membership Report Result. Each of the items in the storage report is an array
 * of values, one value per day. If there is no data for a day, then the value
 * will be None.
 * @typedef {Object} TeamGetMembershipReport
 * @property {string} start_date - First date present in the results as
 * 'YYYY-MM-DD' or None.
 * @property {Array.<Object>} team_size - Team size, for each day.
 * @property {Array.<Object>} pending_invites - The number of pending invites to
 * the team, for each day.
 * @property {Array.<Object>} members_joined - The number of members that joined
 * the team, for each day.
 * @property {Array.<Object>} suspended_members - The number of suspended team
 * members, for each day.
 * @property {Array.<Object>} licenses - The total number of licenses the team
 * has, for each day.
 */

/**
 * Storage Report Result. Each of the items in the storage report is an array of
 * values, one value per day. If there is no data for a day, then the value will
 * be None.
 * @typedef {Object} TeamGetStorageReport
 * @property {string} start_date - First date present in the results as
 * 'YYYY-MM-DD' or None.
 * @property {Array.<Object>} total_usage - Sum of the shared, unshared, and
 * datastore usages, for each day.
 * @property {Array.<Object>} shared_usage - Array of the combined size (bytes)
 * of team members' shared folders, for each day.
 * @property {Array.<Object>} unshared_usage - Array of the combined size
 * (bytes) of team members' root namespaces, for each day.
 * @property {Array.<Object>} shared_folders - Array of the number of shared
 * folders owned by team members, for each day.
 * @property {Array.<Array.<TeamStorageBucket>>} member_storage_map - Array of
 * storage summaries of team members' account sizes. Each storage summary is an
 * array of key, value pairs, where each pair describes a storage bucket. The
 * key indicates the upper bound of the bucket and the value is the number of
 * users in that bucket. There is one such summary per day. If there is no data
 * for a day, the storage summary will be empty.
 */

/**
 * Role of a user in group.
 * @typedef {Object} TeamGroupAccessType
 * @property {('member'|'owner')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamGroupCreateArg
 * @property {string} group_name - Group name.
 * @property {string} [group_external_id] - The creator of a team can associate
 * an arbitrary external ID to the group.
 * @property {TeamCommonGroupManagementType} [group_management_type] - Whether
 * the team can be managed by selected users, or only by team admins
 */

/**
 * @typedef {Object} TeamGroupCreateError
 * @property {('group_name_already_used'|'group_name_invalid'|'external_id_already_in_use'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamGroupDeleteError
 * @property {('group_not_found'|'other'|'group_already_deleted')} .tag - Tag identifying the union variant.
 */

/**
 * Full description of a group.
 * @typedef {Object} TeamGroupFullInfo
 * @property {string} group_name
 * @property {string} group_id
 * @property {TeamCommonGroupManagementType} group_management_type - Who is
 * allowed to manage the group.
 * @property {number} created - The group creation time as a UTC timestamp in
 * milliseconds since the Unix epoch.
 * @property {string} [group_external_id] - External ID of group. This is an
 * arbitrary ID that an admin can attach to a group.
 * @property {number} [member_count] - The number of members in the group.
 * @property {Array.<TeamGroupMemberInfo>} [members] - List of group members.
 */

/**
 * Profile of group member, and role in group.
 * @typedef {Object} TeamGroupMemberInfo
 * @property {TeamMemberProfile} profile - Profile of group member.
 * @property {TeamGroupAccessType} access_type - The role that the user has in
 * the group.
 */

/**
 * Argument for selecting a group and a single user.
 * @typedef {Object} TeamGroupMemberSelector
 * @property {TeamGroupSelector} group - Specify a group.
 * @property {TeamUserSelectorArg} user - Identity of a user that is a member of
 * group.
 */

/**
 * Error that can be raised when GroupMemberSelector is used, and the user is
 * required to be a member of the specified group.
 * @typedef {Object} TeamGroupMemberSelectorError
 * @property {('group_not_found'|'other'|'member_not_in_group')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamGroupMemberSetAccessTypeError
 * @property {('group_not_found'|'other'|'member_not_in_group'|'user_cannot_be_manager_of_company_managed_group')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamGroupMembersAddArg
 * @property {TeamGroupSelector} group - Group to which users will be added.
 * @property {Array.<TeamMemberAccess>} members - List of users to be added to
 * the group.
 * @property {boolean} return_members - Whether to return the list of members in
 * the group.  Note that the default value will cause all the group members  to
 * be returned in the response. This may take a long time for large groups.
 */

/**
 * @typedef {Object} TeamGroupMembersAddError
 * @property {Array.<string>} [members_not_in_team] - Available if .tag is
 * members_not_in_team. These members are not part of your team. Currently, you
 * cannot add members to a group if they are not part of your team, though this
 * may change in a subsequent version. To add new members to your Dropbox
 * Business team, use the :route:`members/add` endpoint.
 * @property {Array.<string>} [users_not_found] - Available if .tag is
 * users_not_found. These users were not found in Dropbox.
 * @property {Array.<string>} [user_cannot_be_manager_of_company_managed_group]
 * - Available if .tag is user_cannot_be_manager_of_company_managed_group. A
 * company-managed group cannot be managed by a user.
 * @property {('group_not_found'|'other'|'duplicate_user'|'group_not_in_team'|'members_not_in_team'|'users_not_found'|'user_must_be_active_to_be_owner'|'user_cannot_be_manager_of_company_managed_group')} .tag - Tag identifying the union variant.
 */

/**
 * Result returned by groups/members/add and groups/members/remove.
 * @typedef {Object} TeamGroupMembersChangeResult
 * @property {TeamGroupFullInfo} group_info - The group info after member change
 * operation has been performed.
 * @property {string} async_job_id - An ID that can be used to obtain the status
 * of granting/revoking group-owned resources.
 */

/**
 * @typedef {Object} TeamGroupMembersRemoveArg
 * @property {TeamGroupSelector} group - Group from which users will be removed.
 * @property {Array.<TeamUserSelectorArg>} users - List of users to be removed
 * from the group.
 * @property {boolean} return_members - Whether to return the list of members in
 * the group.  Note that the default value will cause all the group members  to
 * be returned in the response. This may take a long time for large groups.
 */

/**
 * @typedef {Object} TeamGroupMembersRemoveError
 * @property {('group_not_found'|'other'|'member_not_in_group'|'group_not_in_team')} .tag - Tag identifying the union variant.
 */

/**
 * Argument for selecting a group and a list of users.
 * @typedef {Object} TeamGroupMembersSelector
 * @property {TeamGroupSelector} group - Specify a group.
 * @property {TeamUsersSelectorArg} users - A list of users that are members of
 * group.
 */

/**
 * Error that can be raised when GroupMembersSelector is used, and the users are
 * required to be members of the specified group.
 * @typedef {Object} TeamGroupMembersSelectorError
 * @property {('group_not_found'|'other'|'member_not_in_group')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamGroupMembersSetAccessTypeArg
 * @property {TeamGroupSelector} group - Specify a group.
 * @property {TeamUserSelectorArg} user - Identity of a user that is a member of
 * group.
 * @property {TeamGroupAccessType} access_type - New group access type the user
 * will have.
 * @property {boolean} return_members - Whether to return the list of members in
 * the group.  Note that the default value will cause all the group members  to
 * be returned in the response. This may take a long time for large groups.
 */

/**
 * Argument for selecting a single group, either by group_id or by external
 * group ID.
 * @typedef {Object} TeamGroupSelector
 * @property {string} [group_id] - Available if .tag is group_id. Group ID.
 * @property {string} [group_external_id] - Available if .tag is
 * group_external_id. External ID of the group.
 * @property {('group_id'|'group_external_id')} .tag - Tag identifying the union variant.
 */

/**
 * Error that can be raised when GroupSelector is used.
 * @typedef {Object} TeamGroupSelectorError
 * @property {('group_not_found'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamGroupUpdateArgs
 * @property {TeamGroupSelector} group - Specify a group.
 * @property {boolean} return_members - Whether to return the list of members in
 * the group.  Note that the default value will cause all the group members  to
 * be returned in the response. This may take a long time for large groups.
 * @property {string} [new_group_name] - Optional argument. Set group name to
 * this if provided.
 * @property {string} [new_group_external_id] - Optional argument. New group
 * external ID. If the argument is None, the group's external_id won't be
 * updated. If the argument is empty string, the group's external id will be
 * cleared.
 * @property {TeamCommonGroupManagementType} [new_group_management_type] - Set
 * new group management type, if provided.
 */

/**
 * @typedef {Object} TeamGroupUpdateError
 * @property {('group_not_found'|'other'|'group_name_already_used'|'group_name_invalid'|'external_id_already_in_use')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamGroupsGetInfoError
 * @property {('group_not_on_team'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamGroupsGetInfoItem
 * @property {string} [id_not_found] - Available if .tag is id_not_found. An ID
 * that was provided as a parameter to :route:`groups/get_info`, and did not
 * match a corresponding group. The ID can be a group ID, or an external ID,
 * depending on how the method was called.
 * @property {TeamGroupFullInfo} [group_info] - Available if .tag is group_info.
 * Info about a group.
 * @property {('id_not_found'|'group_info')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamGroupsListArg
 * @property {number} limit - Number of results to return per call.
 */

/**
 * @typedef {Object} TeamGroupsListContinueArg
 * @property {string} cursor - Indicates from what point to get the next set of
 * groups.
 */

/**
 * @typedef {Object} TeamGroupsListContinueError
 * @property {('invalid_cursor'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamGroupsListResult
 * @property {Array.<TeamCommonGroupSummary>} groups
 * @property {string} cursor - Pass the cursor into groups/list/continue to
 * obtain the additional groups.
 * @property {boolean} has_more - Is true if there are additional groups that
 * have not been returned yet. An additional call to groups/list/continue can
 * retrieve them.
 */

/**
 * @typedef {Object} TeamGroupsMembersListArg
 * @property {TeamGroupSelector} group - The group whose members are to be
 * listed.
 * @property {number} limit - Number of results to return per call.
 */

/**
 * @typedef {Object} TeamGroupsMembersListContinueArg
 * @property {string} cursor - Indicates from what point to get the next set of
 * groups.
 */

/**
 * @typedef {Object} TeamGroupsMembersListContinueError
 * @property {('invalid_cursor'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamGroupsMembersListResult
 * @property {Array.<TeamGroupMemberInfo>} members
 * @property {string} cursor - Pass the cursor into groups/members/list/continue
 * to obtain additional group members.
 * @property {boolean} has_more - Is true if there are additional group members
 * that have not been returned yet. An additional call to
 * groups/members/list/continue can retrieve them.
 */

/**
 * @typedef {Object} TeamGroupsPollError
 * @property {('invalid_async_job_id'|'internal_error'|'other'|'access_denied')} .tag - Tag identifying the union variant.
 */

/**
 * Argument for selecting a list of groups, either by group_ids, or external
 * group IDs.
 * @typedef {Object} TeamGroupsSelector
 * @property {Array.<Object>} [group_ids] - Available if .tag is group_ids. List
 * of group IDs.
 * @property {Array.<string>} [group_external_ids] - Available if .tag is
 * group_external_ids. List of external IDs of groups.
 * @property {('group_ids'|'group_external_ids')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamIncludeMembersArg
 * @property {boolean} return_members - Whether to return the list of members in
 * the group.  Note that the default value will cause all the group members  to
 * be returned in the response. This may take a long time for large groups.
 */

/**
 * @typedef {Object} TeamListMemberAppsArg
 * @property {string} team_member_id - The team member id
 */

/**
 * Error returned by linked_apps/list_member_linked_apps.
 * @typedef {Object} TeamListMemberAppsError
 * @property {('member_not_found'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamListMemberAppsResult
 * @property {Array.<TeamApiApp>} linked_api_apps - List of third party
 * applications linked by this team member
 */

/**
 * @typedef {Object} TeamListMemberDevicesArg
 * @property {string} team_member_id - The team's member id
 * @property {boolean} include_web_sessions - Whether to list web sessions of
 * the team's member
 * @property {boolean} include_desktop_clients - Whether to list linked desktop
 * devices of the team's member
 * @property {boolean} include_mobile_clients - Whether to list linked mobile
 * devices of the team's member
 */

/**
 * @typedef {Object} TeamListMemberDevicesError
 * @property {('member_not_found'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamListMemberDevicesResult
 * @property {Array.<TeamActiveWebSession>} [active_web_sessions] - List of web
 * sessions made by this team member
 * @property {Array.<TeamDesktopClientSession>} [desktop_client_sessions] - List
 * of desktop clients used by this team member
 * @property {Array.<TeamMobileClientSession>} [mobile_client_sessions] - List
 * of mobile client used by this team member
 */

/**
 * Arguments for linked_apps/list_members_linked_apps.
 * @typedef {Object} TeamListMembersAppsArg
 * @property {string} [cursor] - At the first call to the
 * linked_apps/list_members_linked_apps the cursor shouldn't be passed. Then, if
 * the result of the call includes a cursor, the following requests should
 * include the received cursors in order to receive the next sub list of the
 * team applications
 */

/**
 * Error returned by linked_apps/list_members_linked_apps
 * @typedef {Object} TeamListMembersAppsError
 * @property {('reset'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * Information returned by linked_apps/list_members_linked_apps.
 * @typedef {Object} TeamListMembersAppsResult
 * @property {Array.<TeamMemberLinkedApps>} apps - The linked applications of
 * each member of the team
 * @property {boolean} has_more - If true, then there are more apps available.
 * Pass the cursor to linked_apps/list_members_linked_apps to retrieve the rest.
 * @property {string} [cursor] - Pass the cursor into
 * linked_apps/list_members_linked_apps to receive the next sub list of team's
 * applications.
 */

/**
 * @typedef {Object} TeamListMembersDevicesArg
 * @property {string} [cursor] - At the first call to the
 * devices/list_members_devices the cursor shouldn't be passed. Then, if the
 * result of the call includes a cursor, the following requests should include
 * the received cursors in order to receive the next sub list of team devices
 * @property {boolean} include_web_sessions - Whether to list web sessions of
 * the team members
 * @property {boolean} include_desktop_clients - Whether to list desktop clients
 * of the team members
 * @property {boolean} include_mobile_clients - Whether to list mobile clients
 * of the team members
 */

/**
 * @typedef {Object} TeamListMembersDevicesError
 * @property {('reset'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamListMembersDevicesResult
 * @property {Array.<TeamMemberDevices>} devices - The devices of each member of
 * the team
 * @property {boolean} has_more - If true, then there are more devices
 * available. Pass the cursor to devices/list_members_devices to retrieve the
 * rest.
 * @property {string} [cursor] - Pass the cursor into
 * devices/list_members_devices to receive the next sub list of team's devices.
 */

/**
 * Arguments for linked_apps/list_team_linked_apps.
 * @typedef {Object} TeamListTeamAppsArg
 * @property {string} [cursor] - At the first call to the
 * linked_apps/list_team_linked_apps the cursor shouldn't be passed. Then, if
 * the result of the call includes a cursor, the following requests should
 * include the received cursors in order to receive the next sub list of the
 * team applications
 */

/**
 * Error returned by linked_apps/list_team_linked_apps
 * @typedef {Object} TeamListTeamAppsError
 * @property {('reset'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * Information returned by linked_apps/list_team_linked_apps.
 * @typedef {Object} TeamListTeamAppsResult
 * @property {Array.<TeamMemberLinkedApps>} apps - The linked applications of
 * each member of the team
 * @property {boolean} has_more - If true, then there are more apps available.
 * Pass the cursor to linked_apps/list_team_linked_apps to retrieve the rest.
 * @property {string} [cursor] - Pass the cursor into
 * linked_apps/list_team_linked_apps to receive the next sub list of team's
 * applications.
 */

/**
 * @typedef {Object} TeamListTeamDevicesArg
 * @property {string} [cursor] - At the first call to the
 * devices/list_team_devices the cursor shouldn't be passed. Then, if the result
 * of the call includes a cursor, the following requests should include the
 * received cursors in order to receive the next sub list of team devices
 * @property {boolean} include_web_sessions - Whether to list web sessions of
 * the team members
 * @property {boolean} include_desktop_clients - Whether to list desktop clients
 * of the team members
 * @property {boolean} include_mobile_clients - Whether to list mobile clients
 * of the team members
 */

/**
 * @typedef {Object} TeamListTeamDevicesError
 * @property {('reset'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamListTeamDevicesResult
 * @property {Array.<TeamMemberDevices>} devices - The devices of each member of
 * the team
 * @property {boolean} has_more - If true, then there are more devices
 * available. Pass the cursor to devices/list_team_devices to retrieve the rest.
 * @property {string} [cursor] - Pass the cursor into devices/list_team_devices
 * to receive the next sub list of team's devices.
 */

/**
 * Specify access type a member should have when joined to a group.
 * @typedef {Object} TeamMemberAccess
 * @property {TeamUserSelectorArg} user - Identity of a user.
 * @property {TeamGroupAccessType} access_type - Access type.
 */

/**
 * @typedef {Object} TeamMemberAddArg
 * @property {string} member_email
 * @property {string} member_given_name - Member's first name.
 * @property {string} member_surname - Member's last name.
 * @property {string} [member_external_id] - External ID for member.
 * @property {boolean} send_welcome_email - Whether to send a welcome email to
 * the member. If send_welcome_email is false, no email invitation will be sent
 * to the user. This may be useful for apps using single sign-on (SSO) flows for
 * onboarding that want to handle announcements themselves.
 * @property {TeamAdminTier} role
 */

/**
 * Describes the result of attempting to add a single user to the team.
 * 'success' is the only value indicating that a user was indeed added to the
 * team - the other values explain the type of failure that occurred, and
 * include the email of the user for which the operation has failed.
 * @typedef {Object} TeamMemberAddResult
 * @property {TeamTeamMemberInfo} [success] - Available if .tag is success.
 * Describes a user that was successfully added to the team.
 * @property {string} [team_license_limit] - Available if .tag is
 * team_license_limit. Team is already full. The organization has no available
 * licenses.
 * @property {string} [free_team_member_limit_reached] - Available if .tag is
 * free_team_member_limit_reached. Team is already full. The free team member
 * limit has been reached.
 * @property {string} [user_already_on_team] - Available if .tag is
 * user_already_on_team. User is already on this team. The provided email
 * address is associated with a user who is already a member of (including in
 * recoverable state) or invited to the team.
 * @property {string} [user_on_another_team] - Available if .tag is
 * user_on_another_team. User is already on another team. The provided email
 * address is associated with a user that is already a member or invited to
 * another team.
 * @property {string} [user_already_paired] - Available if .tag is
 * user_already_paired. User is already paired.
 * @property {string} [user_migration_failed] - Available if .tag is
 * user_migration_failed. User migration has failed.
 * @property {string} [duplicate_external_member_id] - Available if .tag is
 * duplicate_external_member_id. A user with the given external member ID
 * already exists on the team (including in recoverable state).
 * @property {string} [user_creation_failed] - Available if .tag is
 * user_creation_failed. User creation has failed.
 * @property {('success'|'team_license_limit'|'free_team_member_limit_reached'|'user_already_on_team'|'user_on_another_team'|'user_already_paired'|'user_migration_failed'|'duplicate_external_member_id'|'user_creation_failed')} .tag - Tag identifying the union variant.
 */

/**
 * Information on devices of a team's member.
 * @typedef {Object} TeamMemberDevices
 * @property {string} team_member_id - The member unique Id
 * @property {Array.<TeamActiveWebSession>} [web_sessions] - List of web
 * sessions made by this team member
 * @property {Array.<TeamDesktopClientSession>} [desktop_clients] - List of
 * desktop clients by this team member
 * @property {Array.<TeamMobileClientSession>} [mobile_clients] - List of mobile
 * clients by this team member
 */

/**
 * Information on linked applications of a team member.
 * @typedef {Object} TeamMemberLinkedApps
 * @property {string} team_member_id - The member unique Id
 * @property {Array.<TeamApiApp>} linked_api_apps - List of third party
 * applications linked by this team member
 */

/**
 * Basic member profile.
 * @typedef {Object} TeamMemberProfile
 * @property {string} team_member_id - ID of user as a member of a team.
 * @property {string} email - Email address of user.
 * @property {boolean} email_verified - Is true if the user's email is verified
 * to be owned by the user.
 * @property {TeamTeamMemberStatus} status - The user's status as a member of a
 * specific team.
 * @property {UsersName} name - Representations for a person's name.
 * @property {TeamTeamMembershipType} membership_type - The user's membership
 * type: full (normal team member) vs limited (does not use a license; no access
 * to the team's shared quota).
 * @property {string} [external_id] - External ID that a team can attach to the
 * user. An application using the API may find it easier to use their own IDs
 * instead of Dropbox IDs like account_id or team_member_id.
 * @property {string} [account_id] - A user's account identifier.
 */

/**
 * @typedef {Object} TeamMemberSelectorError
 * @property {('user_not_found'|'user_not_in_team')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamMembersAddArg
 * @property {Array.<TeamMemberAddArg>} new_members - Details of new members to
 * be added to the team.
 * @property {boolean} force_async - Whether to force the add to happen
 * asynchronously.
 */

/**
 * @typedef {Object} TeamMembersAddJobStatus
 * @property {Array.<TeamMemberAddResult>} [complete] - Available if .tag is
 * complete. The asynchronous job has finished. For each member that was
 * specified in the parameter :type:`MembersAddArg` that was provided to
 * :route:`members/add`, a corresponding item is returned in this list.
 * @property {string} [failed] - Available if .tag is failed. The asynchronous
 * job returned an error. The string contains an error message.
 * @property {('in_progress'|'complete'|'failed')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamMembersAddLaunch
 * @property {string} [async_job_id] - Available if .tag is async_job_id. This
 * response indicates that the processing is asynchronous. The string is an id
 * that can be used to obtain the status of the asynchronous job.
 * @property {Array.<TeamMemberAddResult>} [complete] - Available if .tag is
 * complete.
 * @property {('async_job_id'|'complete')} .tag - Tag identifying the union variant.
 */

/**
 * Exactly one of team_member_id, email, or external_id must be provided to
 * identify the user account.
 * @typedef {Object} TeamMembersDeactivateArg
 * @property {TeamUserSelectorArg} user - Identity of user to remove/suspend.
 * @property {boolean} wipe_data - If provided, controls if the user's data will
 * be deleted on their linked devices.
 */

/**
 * @typedef {Object} TeamMembersDeactivateError
 * @property {('user_not_found'|'user_not_in_team'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamMembersGetInfoArgs
 * @property {Array.<TeamUserSelectorArg>} members - List of team members.
 */

/**
 * @typedef {Object} TeamMembersGetInfoError
 * @property {'other'} .tag - Tag identifying the union variant.
 */

/**
 * Describes a result obtained for a single user whose id was specified in the
 * parameter of members/get_info.
 * @typedef {Object} TeamMembersGetInfoItem
 * @property {string} [id_not_found] - Available if .tag is id_not_found. An ID
 * that was provided as a parameter to :route:`members/get_info`, and did not
 * match a corresponding user. This might be a team_member_id, an email, or an
 * external ID, depending on how the method was called.
 * @property {TeamTeamMemberInfo} [member_info] - Available if .tag is
 * member_info. Info about a team member.
 * @property {('id_not_found'|'member_info')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamMembersListArg
 * @property {number} limit - Number of results to return per call.
 * @property {boolean} include_removed - Whether to return removed members.
 */

/**
 * @typedef {Object} TeamMembersListContinueArg
 * @property {string} cursor - Indicates from what point to get the next set of
 * members.
 */

/**
 * @typedef {Object} TeamMembersListContinueError
 * @property {('invalid_cursor'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamMembersListError
 * @property {'other'} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamMembersListResult
 * @property {Array.<TeamTeamMemberInfo>} members - List of team members.
 * @property {string} cursor - Pass the cursor into members/list/continue to
 * obtain the additional members.
 * @property {boolean} has_more - Is true if there are additional team members
 * that have not been returned yet. An additional call to members/list/continue
 * can retrieve them.
 */

/**
 * Exactly one of team_member_id, email, or external_id must be provided to
 * identify the user account.
 * @typedef {Object} TeamMembersRecoverArg
 * @property {TeamUserSelectorArg} user - Identity of user to recover.
 */

/**
 * @typedef {Object} TeamMembersRecoverError
 * @property {('user_not_found'|'user_unrecoverable'|'user_not_in_team'|'team_license_limit'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamMembersRemoveArg
 * @property {TeamUserSelectorArg} user - Identity of user to remove/suspend.
 * @property {boolean} wipe_data - If provided, controls if the user's data will
 * be deleted on their linked devices.
 * @property {TeamUserSelectorArg} [transfer_dest_id] - If provided, files from
 * the deleted member account will be transferred to this user.
 * @property {TeamUserSelectorArg} [transfer_admin_id] - If provided, errors
 * during the transfer process will be sent via email to this user. If the
 * transfer_dest_id argument was provided, then this argument must be provided
 * as well.
 * @property {boolean} keep_account - Downgrade the member to a Basic account.
 * The user will retain the email address associated with their Dropbox  account
 * and data in their account that is not restricted to team members. In order to
 * keep the account the argument wipe_data should be set to False.
 */

/**
 * @typedef {Object} TeamMembersRemoveError
 * @property {('user_not_found'|'user_not_in_team'|'other'|'remove_last_admin'|'removed_and_transfer_dest_should_differ'|'removed_and_transfer_admin_should_differ'|'transfer_dest_user_not_found'|'transfer_dest_user_not_in_team'|'transfer_admin_user_not_found'|'transfer_admin_user_not_in_team'|'unspecified_transfer_admin_id'|'transfer_admin_is_not_admin'|'cannot_keep_account_and_transfer'|'cannot_keep_account_and_delete_data'|'email_address_too_long_to_be_disabled')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamMembersSendWelcomeError
 * @property {('user_not_found'|'user_not_in_team'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * Exactly one of team_member_id, email, or external_id must be provided to
 * identify the user account.
 * @typedef {Object} TeamMembersSetPermissionsArg
 * @property {TeamUserSelectorArg} user - Identity of user whose role will be
 * set.
 * @property {TeamAdminTier} new_role - The new role of the member.
 */

/**
 * @typedef {Object} TeamMembersSetPermissionsError
 * @property {('user_not_found'|'last_admin'|'user_not_in_team'|'cannot_set_permissions'|'team_license_limit'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamMembersSetPermissionsResult
 * @property {string} team_member_id - The member ID of the user to which the
 * change was applied.
 * @property {TeamAdminTier} role - The role after the change.
 */

/**
 * Exactly one of team_member_id, email, or external_id must be provided to
 * identify the user account. At least one of new_email, new_external_id,
 * new_given_name, and/or new_surname must be provided.
 * @typedef {Object} TeamMembersSetProfileArg
 * @property {TeamUserSelectorArg} user - Identity of user whose profile will be
 * set.
 * @property {string} [new_email] - New email for member.
 * @property {string} [new_external_id] - New external ID for member.
 * @property {string} [new_given_name] - New given name for member.
 * @property {string} [new_surname] - New surname for member.
 */

/**
 * @typedef {Object} TeamMembersSetProfileError
 * @property {('user_not_found'|'user_not_in_team'|'external_id_and_new_external_id_unsafe'|'no_new_data_specified'|'email_reserved_for_other_user'|'external_id_used_by_other_user'|'set_profile_disallowed'|'param_cannot_be_empty'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamMembersSuspendError
 * @property {('user_not_found'|'user_not_in_team'|'other'|'suspend_inactive_user'|'suspend_last_admin'|'team_license_limit')} .tag - Tag identifying the union variant.
 */

/**
 * Exactly one of team_member_id, email, or external_id must be provided to
 * identify the user account.
 * @typedef {Object} TeamMembersUnsuspendArg
 * @property {TeamUserSelectorArg} user - Identity of user to unsuspend.
 */

/**
 * @typedef {Object} TeamMembersUnsuspendError
 * @property {('user_not_found'|'user_not_in_team'|'other'|'unsuspend_non_suspended_member'|'team_license_limit')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamMobileClientPlatform
 * @property {('iphone'|'ipad'|'android'|'windows_phone'|'blackberry'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * Information about linked Dropbox mobile client sessions
 * @typedef {Object} TeamMobileClientSession
 * @property {string} session_id - The session id
 * @property {string} device_name - The device name
 * @property {TeamMobileClientPlatform} client_type - The mobile application
 * type
 * @property {string} [ip_address] - The IP address of the last activity from
 * this session
 * @property {string} [country] - The country from which the last activity from
 * this session was made
 * @property {Timestamp} [created] - The time this session was created
 * @property {Timestamp} [updated] - The time of the last activity from this
 * session
 * @property {string} [client_version] - The dropbox client version
 * @property {string} [os_version] - The hosting OS version
 * @property {string} [last_carrier] - last carrier used by the device
 */

/**
 * @typedef {Object} TeamRemovedStatus
 * @property {boolean} is_recoverable - True if the removed team member is
 * recoverable
 */

/**
 * @typedef {Object} TeamRevokeDesktopClientArg
 * @property {string} session_id - The session id
 * @property {string} team_member_id - The unique id of the member owning the
 * device
 * @property {boolean} delete_on_unlink - Whether to delete all files of the
 * account (this is possible only if supported by the desktop client and  will
 * be made the next time the client access the account)
 */

/**
 * @typedef {Object} TeamRevokeDeviceSessionArg
 * @property {TeamDeviceSessionArg} [web_session] - Available if .tag is
 * web_session. End an active session
 * @property {TeamRevokeDesktopClientArg} [desktop_client] - Available if .tag
 * is desktop_client. Unlink a linked desktop device
 * @property {TeamDeviceSessionArg} [mobile_client] - Available if .tag is
 * mobile_client. Unlink a linked mobile device
 * @property {('web_session'|'desktop_client'|'mobile_client')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamRevokeDeviceSessionBatchArg
 * @property {Array.<TeamRevokeDeviceSessionArg>} revoke_devices
 */

/**
 * @typedef {Object} TeamRevokeDeviceSessionBatchError
 * @property {'other'} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamRevokeDeviceSessionBatchResult
 * @property {Array.<TeamRevokeDeviceSessionStatus>} revoke_devices_status
 */

/**
 * @typedef {Object} TeamRevokeDeviceSessionError
 * @property {('device_session_not_found'|'member_not_found'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamRevokeDeviceSessionStatus
 * @property {boolean} success - Result of the revoking request
 * @property {TeamRevokeDeviceSessionError} [error_type] - The error cause in
 * case of a failure
 */

/**
 * @typedef {Object} TeamRevokeLinkedApiAppArg
 * @property {string} app_id - The application's unique id
 * @property {string} team_member_id - The unique id of the member owning the
 * device
 * @property {boolean} keep_app_folder - Whether to keep the application
 * dedicated folder (in case the application uses  one)
 */

/**
 * @typedef {Object} TeamRevokeLinkedApiAppBatchArg
 * @property {Array.<TeamRevokeLinkedApiAppArg>} revoke_linked_app
 */

/**
 * Error returned by linked_apps/revoke_linked_app_batch.
 * @typedef {Object} TeamRevokeLinkedAppBatchError
 * @property {'other'} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamRevokeLinkedAppBatchResult
 * @property {Array.<TeamRevokeLinkedAppStatus>} revoke_linked_app_status
 */

/**
 * Error returned by linked_apps/revoke_linked_app.
 * @typedef {Object} TeamRevokeLinkedAppError
 * @property {('app_not_found'|'member_not_found'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamRevokeLinkedAppStatus
 * @property {boolean} success - Result of the revoking request
 * @property {TeamRevokeLinkedAppError} [error_type] - The error cause in case
 * of a failure
 */

/**
 * Describes the number of users in a specific storage bucket.
 * @typedef {Object} TeamStorageBucket
 * @property {string} bucket - The name of the storage bucket. For example, '1G'
 * is a bucket of users with storage size up to 1 Giga.
 * @property {number} users - The number of people whose storage is in the range
 * of this storage bucket.
 */

/**
 * @typedef {Object} TeamTeamFolderAccessError
 * @property {('invalid_team_folder_id'|'no_access'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamTeamFolderActivateError
 * @property {TeamTeamFolderAccessError} [access_error] - Available if .tag is
 * access_error.
 * @property {TeamTeamFolderInvalidStatusError} [status_error] - Available if
 * .tag is status_error.
 * @property {('access_error'|'status_error'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamTeamFolderArchiveArg
 * @property {string} team_folder_id - The ID of the team folder.
 * @property {boolean} force_async_off - Whether to force the archive to happen
 * synchronously.
 */

/**
 * @typedef {Object} TeamTeamFolderArchiveError
 * @property {TeamTeamFolderAccessError} [access_error] - Available if .tag is
 * access_error.
 * @property {TeamTeamFolderInvalidStatusError} [status_error] - Available if
 * .tag is status_error.
 * @property {('access_error'|'status_error'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamTeamFolderArchiveJobStatus
 * @property {TeamTeamFolderMetadata} [complete] - Available if .tag is
 * complete. The archive job has finished. The value is the metadata for the
 * resulting team folder.
 * @property {TeamTeamFolderArchiveError} [failed] - Available if .tag is
 * failed. Error occurred while performing an asynchronous job from
 * :route:`team_folder/archive`.
 * @property {('in_progress'|'complete'|'failed')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamTeamFolderArchiveLaunch
 * @property {string} [async_job_id] - Available if .tag is async_job_id. This
 * response indicates that the processing is asynchronous. The string is an id
 * that can be used to obtain the status of the asynchronous job.
 * @property {TeamTeamFolderMetadata} [complete] - Available if .tag is
 * complete.
 * @property {('async_job_id'|'complete')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamTeamFolderCreateArg
 * @property {string} name - Name for the new team folder.
 */

/**
 * @typedef {Object} TeamTeamFolderCreateError
 * @property {('invalid_folder_name'|'folder_name_already_used'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamTeamFolderGetInfoItem
 * @property {string} [id_not_found] - Available if .tag is id_not_found. An ID
 * that was provided as a parameter to :route:`team_folder/get_info` did not
 * match any of the team's team folders.
 * @property {TeamTeamFolderMetadata} [team_folder_metadata] - Available if .tag
 * is team_folder_metadata. Properties of a team folder.
 * @property {('id_not_found'|'team_folder_metadata')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamTeamFolderIdArg
 * @property {string} team_folder_id - The ID of the team folder.
 */

/**
 * @typedef {Object} TeamTeamFolderIdListArg
 * @property {Array.<Object>} team_folder_ids - The list of team folder IDs.
 */

/**
 * @typedef {Object} TeamTeamFolderInvalidStatusError
 * @property {('active'|'archived'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamTeamFolderListArg
 * @property {number} limit - The maximum number of results to return per
 * request.
 */

/**
 * @typedef {Object} TeamTeamFolderListError
 * @property {TeamTeamFolderAccessError} access_error
 */

/**
 * Result for team_folder/list.
 * @typedef {Object} TeamTeamFolderListResult
 * @property {Array.<TeamTeamFolderMetadata>} team_folders - List of all team
 * folders in the authenticated team.
 */

/**
 * Properties of a team folder.
 * @typedef {Object} TeamTeamFolderMetadata
 * @property {string} team_folder_id - The ID of the team folder.
 * @property {string} name - The name of the team folder.
 * @property {TeamTeamFolderStatus} status - The status of the team folder.
 */

/**
 * @typedef {Object} TeamTeamFolderPermanentlyDeleteError
 * @property {TeamTeamFolderAccessError} [access_error] - Available if .tag is
 * access_error.
 * @property {TeamTeamFolderInvalidStatusError} [status_error] - Available if
 * .tag is status_error.
 * @property {('access_error'|'status_error'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamTeamFolderRenameArg
 * @property {string} team_folder_id - The ID of the team folder.
 * @property {string} name - New team folder name.
 */

/**
 * @typedef {Object} TeamTeamFolderRenameError
 * @property {TeamTeamFolderAccessError} [access_error] - Available if .tag is
 * access_error.
 * @property {('access_error'|'invalid_folder_name'|'folder_name_already_used'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamTeamFolderStatus
 * @property {('active'|'archived'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamTeamGetInfoResult
 * @property {string} name - The name of the team.
 * @property {string} team_id - The ID of the team.
 * @property {number} num_licensed_users - The number of licenses available to
 * the team.
 * @property {number} num_provisioned_users - The number of accounts that have
 * been invited or are already active members of the team.
 * @property {TeamPoliciesTeamMemberPolicies} policies
 */

/**
 * Information about a team member.
 * @typedef {Object} TeamTeamMemberInfo
 * @property {TeamTeamMemberProfile} profile - Profile of a user as a member of
 * a team.
 * @property {TeamAdminTier} role - The user's role in the team.
 */

/**
 * Profile of a user as a member of a team.
 * @typedef {Object} TeamTeamMemberProfile
 * @property {string} team_member_id - ID of user as a member of a team.
 * @property {string} email - Email address of user.
 * @property {boolean} email_verified - Is true if the user's email is verified
 * to be owned by the user.
 * @property {TeamTeamMemberStatus} status - The user's status as a member of a
 * specific team.
 * @property {UsersName} name - Representations for a person's name.
 * @property {TeamTeamMembershipType} membership_type - The user's membership
 * type: full (normal team member) vs limited (does not use a license; no access
 * to the team's shared quota).
 * @property {Array.<Object>} groups - List of group IDs of groups that the user
 * belongs to.
 * @property {string} [external_id] - External ID that a team can attach to the
 * user. An application using the API may find it easier to use their own IDs
 * instead of Dropbox IDs like account_id or team_member_id.
 * @property {string} [account_id] - A user's account identifier.
 */

/**
 * The user's status as a member of a specific team.
 * @typedef {Object} TeamTeamMemberStatus
 * @property {TeamRemovedStatus} [removed] - Available if .tag is removed. User
 * is no longer a member of the team. Removed users are only listed when
 * include_removed is true in members/list.
 * @property {('active'|'invited'|'suspended'|'removed')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamTeamMembershipType
 * @property {('full'|'limited')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamUpdatePropertyTemplateArg
 * @property {string} template_id - An identifier for property template added by
 * properties/template/add.
 * @property {string} [name] - A display name for the property template.
 * Property template names can be up to 256 bytes.
 * @property {string} [description] - Description for new property template.
 * Property template descriptions can be up to 1024 bytes.
 * @property {Array.<PropertiesPropertyFieldTemplate>} [add_fields] - This is a
 * list of custom properties to add to the property template. There can be up to
 * 64 properties in a single property template.
 */

/**
 * @typedef {Object} TeamUpdatePropertyTemplateResult
 * @property {string} template_id - An identifier for property template added by
 * properties/template/add.
 */

/**
 * Argument for selecting a single user, either by team_member_id, external_id
 * or email.
 * @typedef {Object} TeamUserSelectorArg
 * @property {string} [team_member_id] - Available if .tag is team_member_id.
 * @property {string} [external_id] - Available if .tag is external_id.
 * @property {string} [email] - Available if .tag is email.
 * @property {('team_member_id'|'external_id'|'email')} .tag - Tag identifying the union variant.
 */

/**
 * Error that can be returned whenever a struct derived from UserSelectorArg is
 * used.
 * @typedef {Object} TeamUserSelectorError
 * @property {'user_not_found'} .tag - Tag identifying the union variant.
 */

/**
 * Argument for selecting a list of users, either by team_member_ids,
 * external_ids or emails.
 * @typedef {Object} TeamUsersSelectorArg
 * @property {Array.<Object>} [team_member_ids] - Available if .tag is
 * team_member_ids. List of member IDs.
 * @property {Array.<Object>} [external_ids] - Available if .tag is
 * external_ids. List of external user IDs.
 * @property {Array.<Object>} [emails] - Available if .tag is emails. List of
 * email addresses.
 * @property {('team_member_ids'|'external_ids'|'emails')} .tag - Tag identifying the union variant.
 */

/**
 * The group type determines how a group is managed.
 * @typedef {Object} TeamCommonGroupManagementType
 * @property {('company_managed'|'user_managed'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * Information about a group.
 * @typedef {Object} TeamCommonGroupSummary
 * @property {string} group_name
 * @property {string} group_id
 * @property {TeamCommonGroupManagementType} group_management_type - Who is
 * allowed to manage the group.
 * @property {string} [group_external_id] - External ID of group. This is an
 * arbitrary ID that an admin can attach to a group.
 * @property {number} [member_count] - The number of members in the group.
 */

/**
 * The group type determines how a group is created and managed.
 * @typedef {Object} TeamCommonGroupType
 * @property {('team'|'user_managed'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} TeamPoliciesEmmState
 * @property {('disabled'|'optional'|'required'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * Policy governing which shared folders a team member can join.
 * @typedef {Object} TeamPoliciesSharedFolderJoinPolicy
 * @property {('from_team_only'|'from_anyone'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * Policy governing who can be a member of a folder shared by a team member.
 * @typedef {Object} TeamPoliciesSharedFolderMemberPolicy
 * @property {('team'|'anyone'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * Policy governing the visibility of newly created shared links.
 * @typedef {Object} TeamPoliciesSharedLinkCreatePolicy
 * @property {('default_public'|'default_team_only'|'team_only'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * Policies governing team members.
 * @typedef {Object} TeamPoliciesTeamMemberPolicies
 * @property {TeamPoliciesTeamSharingPolicies} sharing - Policies governing
 * sharing.
 * @property {TeamPoliciesEmmState} emm_state - This describes the Enterprise
 * Mobility Management (EMM) state for this team. This information can be used
 * to understand if an organization is integrating with a third-party EMM vendor
 * to further manage and apply restrictions upon the team's Dropbox usage on
 * mobile devices. This is a new feature and in the future we'll be adding more
 * new fields and additional documentation.
 */

/**
 * Policies governing sharing within and outside of the team.
 * @typedef {Object} TeamPoliciesTeamSharingPolicies
 * @property {TeamPoliciesSharedFolderMemberPolicy} shared_folder_member_policy
 * - Who can join folders shared by team members.
 * @property {TeamPoliciesSharedFolderJoinPolicy} shared_folder_join_policy -
 * Which shared folders team members can join.
 * @property {TeamPoliciesSharedLinkCreatePolicy} shared_link_create_policy -
 * What is the visibility of newly created shared links.
 */

/**
 * The amount of detail revealed about an account depends on the user being
 * queried and the user making the query.
 * @typedef {Object} UsersAccount
 * @property {string} account_id - The user's unique Dropbox ID.
 * @property {UsersName} name - Details of a user's name.
 * @property {string} email - The user's e-mail address. Do not rely on this
 * without checking the email_verified field. Even then, it's possible that the
 * user has since lost access to their e-mail.
 * @property {boolean} email_verified - Whether the user has verified their
 * e-mail address.
 * @property {boolean} disabled - Whether the user has been disabled.
 * @property {string} [profile_photo_url] - URL for the photo representing the
 * user, if one is set.
 */

/**
 * What type of account this user has.
 * @typedef {Object} UsersAccountType
 * @property {('basic'|'pro'|'business')} .tag - Tag identifying the union variant.
 */

/**
 * Basic information about any account.
 * @typedef {Object} UsersBasicAccount
 * @property {string} account_id - The user's unique Dropbox ID.
 * @property {UsersName} name - Details of a user's name.
 * @property {string} email - The user's e-mail address. Do not rely on this
 * without checking the email_verified field. Even then, it's possible that the
 * user has since lost access to their e-mail.
 * @property {boolean} email_verified - Whether the user has verified their
 * e-mail address.
 * @property {boolean} disabled - Whether the user has been disabled.
 * @property {boolean} is_teammate - Whether this user is a teammate of the
 * current user. If this account is the current user's account, then this will
 * be true.
 * @property {string} [profile_photo_url] - URL for the photo representing the
 * user, if one is set.
 * @property {string} [team_member_id] - The user's unique team member id. This
 * field will only be present if the user is part of a team and is_teammate is
 * true.
 */

/**
 * Detailed information about the current user's account.
 * @typedef {Object} UsersFullAccount
 * @property {string} account_id - The user's unique Dropbox ID.
 * @property {UsersName} name - Details of a user's name.
 * @property {string} email - The user's e-mail address. Do not rely on this
 * without checking the email_verified field. Even then, it's possible that the
 * user has since lost access to their e-mail.
 * @property {boolean} email_verified - Whether the user has verified their
 * e-mail address.
 * @property {boolean} disabled - Whether the user has been disabled.
 * @property {string} locale - The language that the user specified. Locale tags
 * will be IETF language tags http://en.wikipedia.org/wiki/IETF_language_tag.
 * @property {string} referral_link - The user's referral link
 * https://www.dropbox.com/referrals.
 * @property {boolean} is_paired - Whether the user has a personal and work
 * account. If the current account is personal, then team will always be null,
 * but is_paired will indicate if a work account is linked.
 * @property {UsersAccountType} account_type - What type of account this user
 * has.
 * @property {string} [profile_photo_url] - URL for the photo representing the
 * user, if one is set.
 * @property {string} [country] - The user's two-letter country code, if
 * available. Country codes are based on ISO 3166-1
 * http://en.wikipedia.org/wiki/ISO_3166-1.
 * @property {UsersFullTeam} [team] - If this account is a member of a team,
 * information about that team.
 * @property {string} [team_member_id] - This account's unique team member id.
 * This field will only be present if team is present.
 */

/**
 * Detailed information about a team.
 * @typedef {Object} UsersFullTeam
 * @property {string} id - The team's unique ID.
 * @property {string} name - The name of the team.
 * @property {TeamPoliciesTeamSharingPolicies} sharing_policies - Team policies
 * governing sharing.
 */

/**
 * @typedef {Object} UsersGetAccountArg
 * @property {string} account_id - A user's account identifier.
 */

/**
 * @typedef {Object} UsersGetAccountBatchArg
 * @property {Array.<Object>} account_ids - List of user account identifiers.
 * Should not contain any duplicate account IDs.
 */

/**
 * @typedef {Object} UsersGetAccountBatchError
 * @property {string} [no_account] - Available if .tag is no_account. The value
 * is an account ID specified in :field:`GetAccountBatchArg.account_ids` that
 * does not exist.
 * @property {('no_account'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} UsersGetAccountError
 * @property {('no_account'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * @typedef {Object} UsersIndividualSpaceAllocation
 * @property {number} allocated - The total space allocated to the user's
 * account (bytes).
 */

/**
 * Representations for a person's name to assist with internationalization.
 * @typedef {Object} UsersName
 * @property {string} given_name - Also known as a first name.
 * @property {string} surname - Also known as a last name or family name.
 * @property {string} familiar_name - Locale-dependent name. In the US, a
 * person's familiar name is their given_name, but elsewhere, it could be any
 * combination of a person's given_name and surname.
 * @property {string} display_name - A name that can be used directly to
 * represent the name of a user's Dropbox account.
 * @property {string} abbreviated_name - An abbreviated form of the person's
 * name. Their initials in most locales.
 */

/**
 * Space is allocated differently based on the type of account.
 * @typedef {Object} UsersSpaceAllocation
 * @property {UsersIndividualSpaceAllocation} [individual] - Available if .tag
 * is individual. The user's space allocation applies only to their individual
 * account.
 * @property {UsersTeamSpaceAllocation} [team] - Available if .tag is team. The
 * user shares space with other members of their team.
 * @property {('individual'|'team'|'other')} .tag - Tag identifying the union variant.
 */

/**
 * Information about a user's space usage and quota.
 * @typedef {Object} UsersSpaceUsage
 * @property {number} used - The user's total space usage (bytes).
 * @property {UsersSpaceAllocation} allocation - The user's space allocation.
 */

/**
 * Information about a team.
 * @typedef {Object} UsersTeam
 * @property {string} id - The team's unique ID.
 * @property {string} name - The name of the team.
 */

/**
 * @typedef {Object} UsersTeamSpaceAllocation
 * @property {number} used - The total space currently used by the user's team
 * (bytes).
 * @property {number} allocated - The total space allocated to the user's team
 * (bytes).
 */
